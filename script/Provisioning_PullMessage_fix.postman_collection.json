{
	"info": {
		"_postman_id": "d3ea2349-3f14-4147-b6e3-8b97cc5d0d38",
		"name": "Provisioning_PullMessage_fix",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GeneratePullMessage",
			"item": [
				{
					"name": "GeneratePullMessage_TST_F59_1_1_001_Success_RootAdmin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Desire\",fieldDataValue.CreateThingStateInfo.Type_Desire)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_All\",fieldDataValue.Provisioning.PullMessage.Type_All)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"        \r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionGeneratePullMessage\", resultDescriptionSuccessList.resultDescriptionGeneratePullMessage);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//set global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryPullMessage\", resultDescriptionSuccessList.resultDescriptionInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderRef_InquiryPullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_InquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"pm.globals.set(\"urlPullMessageInquiryPullMessage\", urlRouteList.PullMessage.urlPullMessageInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Desire\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"const x_ais_OrderRef_RemovePullMessage = pm.globals.get(\"x_ais_OrderRef_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"const x_ais_OrderDesc_RemovePullMessage = pm.globals.get(\"x_ais_OrderDesc_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"const x_ais_OrderRef_InquiryPullMessage = pm.globals.get(\"x_ais_OrderRef_InquiryPullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"const x_ais_OrderDesc_InquiryPullMessage = pm.globals.get(\"x_ais_OrderDesc_InquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"var urlPullMessageRemovePullMessage = pm.globals.get(\"urlPullMessageRemovePullMessage\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"var urlPullMessageInquiryPullMessage = pm.globals.get(\"urlPullMessageInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"var resultDescriptionRemovePullMessage = pm.globals.get(\"resultDescriptionRemovePullMessage\");\r",
									"//get global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"var resultDescriptionInquiryPullMessage = pm.globals.get(\"resultDescriptionInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"var resultDescriptionGeneratePullMessage = pm.globals.get(\"resultDescriptionGeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"// GetResponse_PullMessageId\r",
									"pm.environment.set(\"GetResponse_PullMessageId\",jsonData.BackupDataInfo.PullMessageId)\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionGeneratePullMessage+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemovePullMessage\r",
									"RemovePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PullMessageId\": pm.environment.get(\"GetResponse_PullMessageId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemovePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageRemovePullMessage,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePullMessage,\r",
									"            body: httpRequestRemovePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response RemovePullMessage');\r",
									"        let response = await reqPromise(optionsRemovePullMessage);\r",
									"        let jsonDataRemovePullMessage = await response.json();\r",
									"        // console.log('jsonDataRemovePullMessage',jsonDataRemovePullMessage)\r",
									"    \r",
									"        let operationStatusRemovePullMessage = await jsonDataRemovePullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePullMessage is Success\r",
									"        pm.test('RemovePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionRemovePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Description', resultDescriptionRemovePullMessage);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":4.4106 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":7.5774 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryPullMessageName was successfully.\\\", \\\"processTime\\\":2.5268 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertPullMesaage was successfully.\\\", \\\"processTime\\\":19.3706 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\",\"db.PullMessagesCollection\",\"db.PullMessagesCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\",\"Success:InquiryPullMessageName was successfully.\",\"Success:InsertPullMesaage was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessage_202104231104227\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95EE2APfAWzfCt2hcRUCTrovvx/+b5FEoB2fCWCJJgzvf\\\", \\\"x-ais-accountkey\\\":\\\"6082537263fa0e0001c51ad9\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"All\\\", \\\"ExpireDate\\\":\\\"2021-04-25T04:56:14.226Z\\\"} }\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_All\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                            let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"BackupDataInfo\\\":{ \\\"PullMessageId\\\":\\\"6082537663fa0e0001c51aee\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"PullMessageKey\\\":\\\"A1075DA29020BB885D9A1A2C6037F339\\\", \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"AccountId\\\":\\\"6082537263fa0e0001c51ad9\\\", \\\"Enabled\\\":true, \\\"PullMessageInfo\\\":{\\\"Type\\\":\\\"All\\\" }, \\\"CreateDate\\\":\\\"2021-04-23T11:56:22.2915494+07:00\\\", \\\"ExpireDate\\\":\\\"2021-04-25T11:56:14.226+07:00\\\"},\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20100\\\", \\\"Description\\\":\\\"GeneratePullMessage is Success\\\"} }\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageName : \" + jsonParseResponseObject.BackupDataInfo.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"response.BackupDataInfo.ThingId : \" + jsonParseResponseObject.BackupDataInfo.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageInfo.Type : \" + jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type + \" = \" + Type);\r",
									"                            console.log(\"response.BackupDataInfo.ExpireDate : \" + jsonParseResponseObject.BackupDataInfo.ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ExpireDate).to.eql(expireDateRes);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"    \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryPullMessage\r",
									"InquiryPullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryPullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryPullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"PullMessageName\": pm.environment.get(\"PullMessageName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryPullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageInquiryPullMessage,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryPullMessage,\r",
									"            body: httpRequestInquiryPullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryPullMessage');\r",
									"        let response = await reqPromise(optionsInquiryPullMessage);\r",
									"        let jsonDataInquiryPullMessage = await response.json();\r",
									"        // console.log('jsonDataInquiryPullMessage',jsonDataInquiryPullMessage)\r",
									"    \r",
									"        let operationStatusInquiryPullMessage = await jsonDataInquiryPullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryPullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryPullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryPullMessage is Success\r",
									"        pm.test('InquiryPullMessage : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Description', resultDescriptionInquiryPullMessage);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let pullMessageInfo = await jsonDataInquiryPullMessage.PullMessageInfo;\r",
									"        console.log('pullMessageInfo',pullMessageInfo);\r",
									"\r",
									"        let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"        let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"        let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"        let Type = pm.environment.get(\"Type_All\");\r",
									"        let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"        let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"\r",
									"        for(let i=0;i<pullMessageInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : GeneratePullMessage' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                console.log(\"PullMessageName : \" + pullMessageInfo[i].PullMessageName + \" = \" + PullMessageName);\r",
									"                console.log(\"ThingId : \" + pullMessageInfo[i].ThingId + \" = \" + ThingId);\r",
									"                console.log(\"Type : \" + pullMessageInfo[i].PullMessageInfo.Type + \" = \" + Type);\r",
									"                console.log(\"ExpireDate : \" + pullMessageInfo[i].ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('PullMessageName',PullMessageName);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ThingId',ThingId);\r",
									"                pm.expect(pullMessageInfo[i].PullMessageInfo).to.have.property('Type',Type);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ExpireDate',expireDateRes);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryPullMessage();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemovePullMessage();}, 50000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Desire\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_All\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 100000);\r",
									"setTimeout(function(){}, 110000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n    \"PullMessageName\": \"{{PullMessageName}}\",\r\n    \"Sensors\": [\r\n        \"{{SensorKey}}\"\r\n    ],\r\n    \"Type\": \"{{Type_All}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_1_1_002_Success_SupplierAdmin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
									"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Desire\",fieldDataValue.CreateThingStateInfo.Type_Desire)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_All\",fieldDataValue.Provisioning.PullMessage.Type_All)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"        \r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionGeneratePullMessage\", resultDescriptionSuccessList.resultDescriptionGeneratePullMessage);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//set global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryPullMessage\", resultDescriptionSuccessList.resultDescriptionInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderRef_InquiryPullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_InquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"pm.globals.set(\"urlPullMessageInquiryPullMessage\", urlRouteList.PullMessage.urlPullMessageInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Desire\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// Signin get token\r",
									"Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username2,\r",
									"                password:Password2\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 5000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await Signin2();}, 10000); \r",
									"setTimeout(async function(){}, 15000);  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"const x_ais_OrderRef_RemovePullMessage = pm.globals.get(\"x_ais_OrderRef_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"const x_ais_OrderDesc_RemovePullMessage = pm.globals.get(\"x_ais_OrderDesc_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"const x_ais_OrderRef_InquiryPullMessage = pm.globals.get(\"x_ais_OrderRef_InquiryPullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"const x_ais_OrderDesc_InquiryPullMessage = pm.globals.get(\"x_ais_OrderDesc_InquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"var urlPullMessageRemovePullMessage = pm.globals.get(\"urlPullMessageRemovePullMessage\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"var urlPullMessageInquiryPullMessage = pm.globals.get(\"urlPullMessageInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"var resultDescriptionRemovePullMessage = pm.globals.get(\"resultDescriptionRemovePullMessage\");\r",
									"//get global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"var resultDescriptionInquiryPullMessage = pm.globals.get(\"resultDescriptionInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"var resultDescriptionGeneratePullMessage = pm.globals.get(\"resultDescriptionGeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"// GetResponse_PullMessageId\r",
									"pm.environment.set(\"GetResponse_PullMessageId\",jsonData.BackupDataInfo.PullMessageId)\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionGeneratePullMessage+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemovePullMessage\r",
									"RemovePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PullMessageId\": pm.environment.get(\"GetResponse_PullMessageId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemovePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageRemovePullMessage,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePullMessage,\r",
									"            body: httpRequestRemovePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response RemovePullMessage');\r",
									"        let response = await reqPromise(optionsRemovePullMessage);\r",
									"        let jsonDataRemovePullMessage = await response.json();\r",
									"        // console.log('jsonDataRemovePullMessage',jsonDataRemovePullMessage)\r",
									"    \r",
									"        let operationStatusRemovePullMessage = await jsonDataRemovePullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePullMessage is Success\r",
									"        pm.test('RemovePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionRemovePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Description', resultDescriptionRemovePullMessage);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":4.4106 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":7.5774 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryPullMessageName was successfully.\\\", \\\"processTime\\\":2.5268 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertPullMesaage was successfully.\\\", \\\"processTime\\\":19.3706 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\",\"db.PullMessagesCollection\",\"db.PullMessagesCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\",\"Success:InquiryPullMessageName was successfully.\",\"Success:InsertPullMesaage was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessage_202104231104227\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95EE2APfAWzfCt2hcRUCTrovvx/+b5FEoB2fCWCJJgzvf\\\", \\\"x-ais-accountkey\\\":\\\"6082537263fa0e0001c51ad9\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"All\\\", \\\"ExpireDate\\\":\\\"2021-04-25T04:56:14.226Z\\\"} }\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_All\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                            let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"BackupDataInfo\\\":{ \\\"PullMessageId\\\":\\\"6082537663fa0e0001c51aee\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"PullMessageKey\\\":\\\"A1075DA29020BB885D9A1A2C6037F339\\\", \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"AccountId\\\":\\\"6082537263fa0e0001c51ad9\\\", \\\"Enabled\\\":true, \\\"PullMessageInfo\\\":{\\\"Type\\\":\\\"All\\\" }, \\\"CreateDate\\\":\\\"2021-04-23T11:56:22.2915494+07:00\\\", \\\"ExpireDate\\\":\\\"2021-04-25T11:56:14.226+07:00\\\"},\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20100\\\", \\\"Description\\\":\\\"GeneratePullMessage is Success\\\"} }\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageName : \" + jsonParseResponseObject.BackupDataInfo.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"response.BackupDataInfo.ThingId : \" + jsonParseResponseObject.BackupDataInfo.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageInfo.Type : \" + jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type + \" = \" + Type);\r",
									"                            console.log(\"response.BackupDataInfo.ExpireDate : \" + jsonParseResponseObject.BackupDataInfo.ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ExpireDate).to.eql(expireDateRes);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"    \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryPullMessage\r",
									"InquiryPullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryPullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryPullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"PullMessageName\": pm.environment.get(\"PullMessageName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryPullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageInquiryPullMessage,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryPullMessage,\r",
									"            body: httpRequestInquiryPullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryPullMessage');\r",
									"        let response = await reqPromise(optionsInquiryPullMessage);\r",
									"        let jsonDataInquiryPullMessage = await response.json();\r",
									"        // console.log('jsonDataInquiryPullMessage',jsonDataInquiryPullMessage)\r",
									"    \r",
									"        let operationStatusInquiryPullMessage = await jsonDataInquiryPullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryPullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryPullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryPullMessage is Success\r",
									"        pm.test('InquiryPullMessage : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Description', resultDescriptionInquiryPullMessage);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let pullMessageInfo = await jsonDataInquiryPullMessage.PullMessageInfo;\r",
									"        console.log('pullMessageInfo',pullMessageInfo);\r",
									"\r",
									"        let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"        let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"        let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"        let Type = pm.environment.get(\"Type_All\");\r",
									"        let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"        let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"\r",
									"        for(let i=0;i<pullMessageInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : GeneratePullMessage' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                console.log(\"PullMessageName : \" + pullMessageInfo[i].PullMessageName + \" = \" + PullMessageName);\r",
									"                console.log(\"ThingId : \" + pullMessageInfo[i].ThingId + \" = \" + ThingId);\r",
									"                console.log(\"Type : \" + pullMessageInfo[i].PullMessageInfo.Type + \" = \" + Type);\r",
									"                console.log(\"ExpireDate : \" + pullMessageInfo[i].ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('PullMessageName',PullMessageName);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ThingId',ThingId);\r",
									"                pm.expect(pullMessageInfo[i].PullMessageInfo).to.have.property('Type',Type);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ExpireDate',expireDateRes);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryPullMessage();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemovePullMessage();}, 50000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Desire\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_All\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 100000);\r",
									"setTimeout(function(){}, 110000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n    \"PullMessageName\": \"{{PullMessageName}}\",\r\n    \"Sensors\": [\r\n        \"{{SensorKey}}\"\r\n    ],\r\n    \"Type\": \"{{Type_All}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_1_1_003_Success_CustomerAdmin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
									"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Desire\",fieldDataValue.CreateThingStateInfo.Type_Desire)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_All\",fieldDataValue.Provisioning.PullMessage.Type_All)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"        \r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionGeneratePullMessage\", resultDescriptionSuccessList.resultDescriptionGeneratePullMessage);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//set global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryPullMessage\", resultDescriptionSuccessList.resultDescriptionInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderRef_InquiryPullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_InquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"pm.globals.set(\"urlPullMessageInquiryPullMessage\", urlRouteList.PullMessage.urlPullMessageInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Desire\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// Signin get token\r",
									"Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username2,\r",
									"                password:Password2\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await Signin2();}, 10000); \r",
									"setTimeout(async function(){}, 15000);  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"const x_ais_OrderRef_RemovePullMessage = pm.globals.get(\"x_ais_OrderRef_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"const x_ais_OrderDesc_RemovePullMessage = pm.globals.get(\"x_ais_OrderDesc_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"const x_ais_OrderRef_InquiryPullMessage = pm.globals.get(\"x_ais_OrderRef_InquiryPullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"const x_ais_OrderDesc_InquiryPullMessage = pm.globals.get(\"x_ais_OrderDesc_InquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"var urlPullMessageRemovePullMessage = pm.globals.get(\"urlPullMessageRemovePullMessage\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"var urlPullMessageInquiryPullMessage = pm.globals.get(\"urlPullMessageInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"var resultDescriptionRemovePullMessage = pm.globals.get(\"resultDescriptionRemovePullMessage\");\r",
									"//get global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"var resultDescriptionInquiryPullMessage = pm.globals.get(\"resultDescriptionInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"var resultDescriptionGeneratePullMessage = pm.globals.get(\"resultDescriptionGeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"// GetResponse_PullMessageId\r",
									"pm.environment.set(\"GetResponse_PullMessageId\",jsonData.BackupDataInfo.PullMessageId)\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionGeneratePullMessage+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemovePullMessage\r",
									"RemovePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PullMessageId\": pm.environment.get(\"GetResponse_PullMessageId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemovePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageRemovePullMessage,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePullMessage,\r",
									"            body: httpRequestRemovePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response RemovePullMessage');\r",
									"        let response = await reqPromise(optionsRemovePullMessage);\r",
									"        let jsonDataRemovePullMessage = await response.json();\r",
									"        // console.log('jsonDataRemovePullMessage',jsonDataRemovePullMessage)\r",
									"    \r",
									"        let operationStatusRemovePullMessage = await jsonDataRemovePullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePullMessage is Success\r",
									"        pm.test('RemovePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionRemovePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Description', resultDescriptionRemovePullMessage);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":4.4106 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":7.5774 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryPullMessageName was successfully.\\\", \\\"processTime\\\":2.5268 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertPullMesaage was successfully.\\\", \\\"processTime\\\":19.3706 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\",\"db.PullMessagesCollection\",\"db.PullMessagesCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\",\"Success:InquiryPullMessageName was successfully.\",\"Success:InsertPullMesaage was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessage_202104231104227\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95EE2APfAWzfCt2hcRUCTrovvx/+b5FEoB2fCWCJJgzvf\\\", \\\"x-ais-accountkey\\\":\\\"6082537263fa0e0001c51ad9\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"All\\\", \\\"ExpireDate\\\":\\\"2021-04-25T04:56:14.226Z\\\"} }\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_All\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                            let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"BackupDataInfo\\\":{ \\\"PullMessageId\\\":\\\"6082537663fa0e0001c51aee\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"PullMessageKey\\\":\\\"A1075DA29020BB885D9A1A2C6037F339\\\", \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"AccountId\\\":\\\"6082537263fa0e0001c51ad9\\\", \\\"Enabled\\\":true, \\\"PullMessageInfo\\\":{\\\"Type\\\":\\\"All\\\" }, \\\"CreateDate\\\":\\\"2021-04-23T11:56:22.2915494+07:00\\\", \\\"ExpireDate\\\":\\\"2021-04-25T11:56:14.226+07:00\\\"},\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20100\\\", \\\"Description\\\":\\\"GeneratePullMessage is Success\\\"} }\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageName : \" + jsonParseResponseObject.BackupDataInfo.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"response.BackupDataInfo.ThingId : \" + jsonParseResponseObject.BackupDataInfo.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageInfo.Type : \" + jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type + \" = \" + Type);\r",
									"                            console.log(\"response.BackupDataInfo.ExpireDate : \" + jsonParseResponseObject.BackupDataInfo.ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ExpireDate).to.eql(expireDateRes);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"    \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryPullMessage\r",
									"InquiryPullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryPullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryPullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"PullMessageName\": pm.environment.get(\"PullMessageName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryPullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageInquiryPullMessage,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryPullMessage,\r",
									"            body: httpRequestInquiryPullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryPullMessage');\r",
									"        let response = await reqPromise(optionsInquiryPullMessage);\r",
									"        let jsonDataInquiryPullMessage = await response.json();\r",
									"        // console.log('jsonDataInquiryPullMessage',jsonDataInquiryPullMessage)\r",
									"    \r",
									"        let operationStatusInquiryPullMessage = await jsonDataInquiryPullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryPullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryPullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryPullMessage is Success\r",
									"        pm.test('InquiryPullMessage : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Description', resultDescriptionInquiryPullMessage);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let pullMessageInfo = await jsonDataInquiryPullMessage.PullMessageInfo;\r",
									"        console.log('pullMessageInfo',pullMessageInfo);\r",
									"\r",
									"        let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"        let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"        let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"        let Type = pm.environment.get(\"Type_All\");\r",
									"        let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"        let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"\r",
									"        for(let i=0;i<pullMessageInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : GeneratePullMessage' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                console.log(\"PullMessageName : \" + pullMessageInfo[i].PullMessageName + \" = \" + PullMessageName);\r",
									"                console.log(\"ThingId : \" + pullMessageInfo[i].ThingId + \" = \" + ThingId);\r",
									"                console.log(\"Type : \" + pullMessageInfo[i].PullMessageInfo.Type + \" = \" + Type);\r",
									"                console.log(\"ExpireDate : \" + pullMessageInfo[i].ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('PullMessageName',PullMessageName);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ThingId',ThingId);\r",
									"                pm.expect(pullMessageInfo[i].PullMessageInfo).to.have.property('Type',Type);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ExpireDate',expireDateRes);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryPullMessage();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemovePullMessage();}, 50000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Desire\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_All\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 100000);\r",
									"setTimeout(function(){}, 110000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n    \"PullMessageName\": \"{{PullMessageName}}\",\r\n    \"Sensors\": [\r\n        \"{{SensorKey}}\"\r\n    ],\r\n    \"Type\": \"{{Type_All}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_1_1_004_Success_Supplier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
									"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Desire\",fieldDataValue.CreateThingStateInfo.Type_Desire)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_All\",fieldDataValue.Provisioning.PullMessage.Type_All)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"        \r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionGeneratePullMessage\", resultDescriptionSuccessList.resultDescriptionGeneratePullMessage);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//set global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryPullMessage\", resultDescriptionSuccessList.resultDescriptionInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderRef_InquiryPullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_InquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"pm.globals.set(\"urlPullMessageInquiryPullMessage\", urlRouteList.PullMessage.urlPullMessageInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Desire\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// Signin get token\r",
									"Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username2,\r",
									"                password:Password2\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await Signin2();}, 10000); \r",
									"setTimeout(async function(){}, 15000);  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"const x_ais_OrderRef_RemovePullMessage = pm.globals.get(\"x_ais_OrderRef_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"const x_ais_OrderDesc_RemovePullMessage = pm.globals.get(\"x_ais_OrderDesc_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"const x_ais_OrderRef_InquiryPullMessage = pm.globals.get(\"x_ais_OrderRef_InquiryPullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"const x_ais_OrderDesc_InquiryPullMessage = pm.globals.get(\"x_ais_OrderDesc_InquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"var urlPullMessageRemovePullMessage = pm.globals.get(\"urlPullMessageRemovePullMessage\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"var urlPullMessageInquiryPullMessage = pm.globals.get(\"urlPullMessageInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"var resultDescriptionRemovePullMessage = pm.globals.get(\"resultDescriptionRemovePullMessage\");\r",
									"//get global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"var resultDescriptionInquiryPullMessage = pm.globals.get(\"resultDescriptionInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"var resultDescriptionGeneratePullMessage = pm.globals.get(\"resultDescriptionGeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"// GetResponse_PullMessageId\r",
									"pm.environment.set(\"GetResponse_PullMessageId\",jsonData.BackupDataInfo.PullMessageId)\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionGeneratePullMessage+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemovePullMessage\r",
									"RemovePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PullMessageId\": pm.environment.get(\"GetResponse_PullMessageId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemovePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageRemovePullMessage,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePullMessage,\r",
									"            body: httpRequestRemovePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response RemovePullMessage');\r",
									"        let response = await reqPromise(optionsRemovePullMessage);\r",
									"        let jsonDataRemovePullMessage = await response.json();\r",
									"        // console.log('jsonDataRemovePullMessage',jsonDataRemovePullMessage)\r",
									"    \r",
									"        let operationStatusRemovePullMessage = await jsonDataRemovePullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePullMessage is Success\r",
									"        pm.test('RemovePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionRemovePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Description', resultDescriptionRemovePullMessage);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":4.4106 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":7.5774 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryPullMessageName was successfully.\\\", \\\"processTime\\\":2.5268 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertPullMesaage was successfully.\\\", \\\"processTime\\\":19.3706 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\",\"db.PullMessagesCollection\",\"db.PullMessagesCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\",\"Success:InquiryPullMessageName was successfully.\",\"Success:InsertPullMesaage was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessage_202104231104227\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95EE2APfAWzfCt2hcRUCTrovvx/+b5FEoB2fCWCJJgzvf\\\", \\\"x-ais-accountkey\\\":\\\"6082537263fa0e0001c51ad9\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"All\\\", \\\"ExpireDate\\\":\\\"2021-04-25T04:56:14.226Z\\\"} }\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_All\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                            let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"BackupDataInfo\\\":{ \\\"PullMessageId\\\":\\\"6082537663fa0e0001c51aee\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"PullMessageKey\\\":\\\"A1075DA29020BB885D9A1A2C6037F339\\\", \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"AccountId\\\":\\\"6082537263fa0e0001c51ad9\\\", \\\"Enabled\\\":true, \\\"PullMessageInfo\\\":{\\\"Type\\\":\\\"All\\\" }, \\\"CreateDate\\\":\\\"2021-04-23T11:56:22.2915494+07:00\\\", \\\"ExpireDate\\\":\\\"2021-04-25T11:56:14.226+07:00\\\"},\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20100\\\", \\\"Description\\\":\\\"GeneratePullMessage is Success\\\"} }\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageName : \" + jsonParseResponseObject.BackupDataInfo.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"response.BackupDataInfo.ThingId : \" + jsonParseResponseObject.BackupDataInfo.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageInfo.Type : \" + jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type + \" = \" + Type);\r",
									"                            console.log(\"response.BackupDataInfo.ExpireDate : \" + jsonParseResponseObject.BackupDataInfo.ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ExpireDate).to.eql(expireDateRes);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"    \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryPullMessage\r",
									"InquiryPullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryPullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryPullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"PullMessageName\": pm.environment.get(\"PullMessageName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryPullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageInquiryPullMessage,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryPullMessage,\r",
									"            body: httpRequestInquiryPullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryPullMessage');\r",
									"        let response = await reqPromise(optionsInquiryPullMessage);\r",
									"        let jsonDataInquiryPullMessage = await response.json();\r",
									"        // console.log('jsonDataInquiryPullMessage',jsonDataInquiryPullMessage)\r",
									"    \r",
									"        let operationStatusInquiryPullMessage = await jsonDataInquiryPullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryPullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryPullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryPullMessage is Success\r",
									"        pm.test('InquiryPullMessage : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Description', resultDescriptionInquiryPullMessage);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let pullMessageInfo = await jsonDataInquiryPullMessage.PullMessageInfo;\r",
									"        console.log('pullMessageInfo',pullMessageInfo);\r",
									"\r",
									"        let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"        let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"        let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"        let Type = pm.environment.get(\"Type_All\");\r",
									"        let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"        let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"\r",
									"        for(let i=0;i<pullMessageInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : GeneratePullMessage' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                console.log(\"PullMessageName : \" + pullMessageInfo[i].PullMessageName + \" = \" + PullMessageName);\r",
									"                console.log(\"ThingId : \" + pullMessageInfo[i].ThingId + \" = \" + ThingId);\r",
									"                console.log(\"Type : \" + pullMessageInfo[i].PullMessageInfo.Type + \" = \" + Type);\r",
									"                console.log(\"ExpireDate : \" + pullMessageInfo[i].ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('PullMessageName',PullMessageName);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ThingId',ThingId);\r",
									"                pm.expect(pullMessageInfo[i].PullMessageInfo).to.have.property('Type',Type);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ExpireDate',expireDateRes);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryPullMessage();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemovePullMessage();}, 50000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Desire\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_All\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 100000);\r",
									"setTimeout(function(){}, 110000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n    \"PullMessageName\": \"{{PullMessageName}}\",\r\n    \"Sensors\": [\r\n        \"{{SensorKey}}\"\r\n    ],\r\n    \"Type\": \"{{Type_All}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_1_1_005_Success_Customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username2 = pm.environment.get(\"Username_Customer\");\r",
									"var Password2 = pm.environment.get(\"Password_Customer\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Desire\",fieldDataValue.CreateThingStateInfo.Type_Desire)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_All\",fieldDataValue.Provisioning.PullMessage.Type_All)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"        \r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionGeneratePullMessage\", resultDescriptionSuccessList.resultDescriptionGeneratePullMessage);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//set global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryPullMessage\", resultDescriptionSuccessList.resultDescriptionInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderRef_InquiryPullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryPullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_InquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"pm.globals.set(\"urlPullMessageInquiryPullMessage\", urlRouteList.PullMessage.urlPullMessageInquiryPullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Desire\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// Signin get token\r",
									"Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username2,\r",
									"                password:Password2\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await Signin2();}, 10000); \r",
									"setTimeout(async function(){}, 15000);  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"const x_ais_OrderRef_RemovePullMessage = pm.globals.get(\"x_ais_OrderRef_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"const x_ais_OrderDesc_RemovePullMessage = pm.globals.get(\"x_ais_OrderDesc_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryPullMessage_\"\r",
									"const x_ais_OrderRef_InquiryPullMessage = pm.globals.get(\"x_ais_OrderRef_InquiryPullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryPullMessage\"\r",
									"const x_ais_OrderDesc_InquiryPullMessage = pm.globals.get(\"x_ais_OrderDesc_InquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"var urlPullMessageRemovePullMessage = pm.globals.get(\"urlPullMessageRemovePullMessage\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/PullMessage/InquiryPullMessage\"\r",
									"var urlPullMessageInquiryPullMessage = pm.globals.get(\"urlPullMessageInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"var resultDescriptionRemovePullMessage = pm.globals.get(\"resultDescriptionRemovePullMessage\");\r",
									"//get global variable to resultDescription \"InquiryPullMessage is Success\"\r",
									"var resultDescriptionInquiryPullMessage = pm.globals.get(\"resultDescriptionInquiryPullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"var resultDescriptionGeneratePullMessage = pm.globals.get(\"resultDescriptionGeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"// GetResponse_PullMessageId\r",
									"pm.environment.set(\"GetResponse_PullMessageId\",jsonData.BackupDataInfo.PullMessageId)\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionGeneratePullMessage+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemovePullMessage\r",
									"RemovePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PullMessageId\": pm.environment.get(\"GetResponse_PullMessageId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemovePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageRemovePullMessage,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePullMessage,\r",
									"            body: httpRequestRemovePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response RemovePullMessage');\r",
									"        let response = await reqPromise(optionsRemovePullMessage);\r",
									"        let jsonDataRemovePullMessage = await response.json();\r",
									"        // console.log('jsonDataRemovePullMessage',jsonDataRemovePullMessage)\r",
									"    \r",
									"        let operationStatusRemovePullMessage = await jsonDataRemovePullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePullMessage is Success\r",
									"        pm.test('RemovePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionRemovePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Description', resultDescriptionRemovePullMessage);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":4.4106 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":7.5774 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryPullMessageName was successfully.\\\", \\\"processTime\\\":2.5268 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertPullMesaage was successfully.\\\", \\\"processTime\\\":19.3706 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\",\"db.PullMessagesCollection\",\"db.PullMessagesCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\",\"Success:InquiryPullMessageName was successfully.\",\"Success:InsertPullMesaage was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessage_202104231104227\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95EE2APfAWzfCt2hcRUCTrovvx/+b5FEoB2fCWCJJgzvf\\\", \\\"x-ais-accountkey\\\":\\\"6082537263fa0e0001c51ad9\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"All\\\", \\\"ExpireDate\\\":\\\"2021-04-25T04:56:14.226Z\\\"} }\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_All\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                            let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"BackupDataInfo\\\":{ \\\"PullMessageId\\\":\\\"6082537663fa0e0001c51aee\\\", \\\"PullMessageName\\\":\\\"Pull_T01354133\\\", \\\"PullMessageKey\\\":\\\"A1075DA29020BB885D9A1A2C6037F339\\\", \\\"ThingId\\\":\\\"6082537463fa0e0001c51ae7\\\", \\\"AccountId\\\":\\\"6082537263fa0e0001c51ad9\\\", \\\"Enabled\\\":true, \\\"PullMessageInfo\\\":{\\\"Type\\\":\\\"All\\\" }, \\\"CreateDate\\\":\\\"2021-04-23T11:56:22.2915494+07:00\\\", \\\"ExpireDate\\\":\\\"2021-04-25T11:56:14.226+07:00\\\"},\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20100\\\", \\\"Description\\\":\\\"GeneratePullMessage is Success\\\"} }\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageName : \" + jsonParseResponseObject.BackupDataInfo.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"response.BackupDataInfo.ThingId : \" + jsonParseResponseObject.BackupDataInfo.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"response.BackupDataInfo.PullMessageInfo.Type : \" + jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type + \" = \" + Type);\r",
									"                            console.log(\"response.BackupDataInfo.ExpireDate : \" + jsonParseResponseObject.BackupDataInfo.ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.PullMessageInfo.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseResponseObject.BackupDataInfo.ExpireDate).to.eql(expireDateRes);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionGeneratePullMessage);\r",
									"    \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionGeneratePullMessage);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryPullMessage\r",
									"InquiryPullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryPullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryPullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"PullMessageName\": pm.environment.get(\"PullMessageName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryPullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageInquiryPullMessage,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryPullMessage,\r",
									"            body: httpRequestInquiryPullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryPullMessage');\r",
									"        let response = await reqPromise(optionsInquiryPullMessage);\r",
									"        let jsonDataInquiryPullMessage = await response.json();\r",
									"        // console.log('jsonDataInquiryPullMessage',jsonDataInquiryPullMessage)\r",
									"    \r",
									"        let operationStatusInquiryPullMessage = await jsonDataInquiryPullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryPullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryPullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryPullMessage is Success\r",
									"        pm.test('InquiryPullMessage : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryPullMessage).to.have.property('Description', resultDescriptionInquiryPullMessage);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let pullMessageInfo = await jsonDataInquiryPullMessage.PullMessageInfo;\r",
									"        console.log('pullMessageInfo',pullMessageInfo);\r",
									"\r",
									"        let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"        let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"        let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"        let Type = pm.environment.get(\"Type_All\");\r",
									"        let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"        let expireDateRes = moment(ExpireDate).format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\r",
									"\r",
									"        for(let i=0;i<pullMessageInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : GeneratePullMessage' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                console.log(\"PullMessageName : \" + pullMessageInfo[i].PullMessageName + \" = \" + PullMessageName);\r",
									"                console.log(\"ThingId : \" + pullMessageInfo[i].ThingId + \" = \" + ThingId);\r",
									"                console.log(\"Type : \" + pullMessageInfo[i].PullMessageInfo.Type + \" = \" + Type);\r",
									"                console.log(\"ExpireDate : \" + pullMessageInfo[i].ExpireDate + \" = \" + expireDateRes);\r",
									"\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('PullMessageName',PullMessageName);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ThingId',ThingId);\r",
									"                pm.expect(pullMessageInfo[i].PullMessageInfo).to.have.property('Type',Type);\r",
									"                pm.expect(pullMessageInfo[i]).to.have.property('ExpireDate',expireDateRes);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryPullMessage();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemovePullMessage();}, 50000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Desire\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_All\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 100000);\r",
									"setTimeout(function(){}, 110000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n    \"PullMessageName\": \"{{PullMessageName}}\",\r\n    \"Sensors\": [\r\n        \"{{SensorKey}}\"\r\n    ],\r\n    \"Type\": \"{{Type_All}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_0_2_002_Error_AccountKeyUntrustedOrInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage_fail = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 401\r",
									"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
									"//get global variable to resultCode \"40103\"\r",
									"var resultCodeTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultCodeTheTokenIsUntrustedOrInvalid\");\r",
									"//get global variable to resultDescription \"The AccountKey is Untrusted or Invalid\"\r",
									"var resultDescriptionTheAccountKeyIsUntrustedOrInvalid = pm.globals.get(\"resultDescriptionTheAccountKeyIsUntrustedOrInvalid\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeUnauthorized, function () {\r",
									"    pm.response.to.have.status(statusCodeUnauthorized);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus code is '+'\"'+ resultCodeTheTokenIsUntrustedOrInvalid +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionTheAccountKeyIsUntrustedOrInvalid+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheAccountKeyIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":1.126 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage_002;\r",
									"                        // [\"Success:InquiryAccount was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage_002;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessagefail_202104231404994\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95Afddyj7pbidHoAL30DSd4xGJW8SXArxaUIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"608276834252b400016e65dcxx\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"608276854252b400016e65e4\\\", \\\"PullMessageName\\\":\\\"Pull_T01654808\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"Custom\\\", \\\"ExpireDate\\\":\\\"2021-04-25T07:25:50.993Z\\\"} }\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\") + pm.environment.get(\"AccountKey_Invalid\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_Custom\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40103\\\", \\\"Description\\\":\\\"The AccountKey is Untrusted or Invalid\\\"} }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheAccountKeyIsUntrustedOrInvalid);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 70000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Report\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"AccountKey_Invalid\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_Custom\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 75000);\r",
									"setTimeout(function(){}, 80000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Report\",fieldDataValue.CreateThingStateInfo.Type_Report)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"AccountKey_Invalid\",fieldDataValue.Provisioning.AccountKey_Invalid)\r",
									"pm.environment.set(\"Type_Custom\",fieldDataValue.Provisioning.PullMessage.Type_Custom)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 401\r",
									"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40103\"\r",
									"pm.globals.set(\"resultCodeTheTokenIsUntrustedOrInvalid\", resultCodeList.resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The AccountKey is Untrusted or Invalid\"\r",
									"pm.globals.set(\"resultDescriptionTheAccountKeyIsUntrustedOrInvalid\", resultDescriptionErrorList.resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage_fail\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage_fail);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Report\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}{{AccountKey_Invalid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n    \"PullMessageName\": \"{{PullMessageName}}\",\r\n    \"Sensors\": [\r\n        \"{{SensorKey}}\"\r\n    ],\r\n    \"Type\": \"{{Type_Custom}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_0_2_003_Error_AccountKeyIsRequire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage_fail = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The x_ais_AccountKey field is required.\"\r",
									"var resultDescriptionThexaisAccountKeyFieldIsRequired = pm.globals.get(\"resultDescriptionThexaisAccountKeyFieldIsRequired\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionThexaisAccountKeyFieldIsRequired+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessagefail_202104231404255\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95FlXfguzelylgx22rjMqPuhGJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"60827b9a4252b400016e67a6\\\", \\\"PullMessageName\\\":\\\"Pull_T01883393\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"Custom\\\", \\\"ExpireDate\\\":\\\"2021-04-25T07:47:30.254Z\\\"} }\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            // let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_Custom\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            // console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            // pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The x_ais_AccountKey field is required.\\\"} }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 70000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Report\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_Custom\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 75000);\r",
									"setTimeout(function(){}, 80000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Report\",fieldDataValue.CreateThingStateInfo.Type_Report)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_Custom\",fieldDataValue.Provisioning.PullMessage.Type_Custom)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The x_ais_AccountKey field is required.\"\r",
									"pm.globals.set(\"resultDescriptionThexaisAccountKeyFieldIsRequired\", resultDescriptionErrorList.resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage_fail\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage_fail);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Report\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"PullMessageName\": \"{{PullMessageName}}\",\r\n  \"Sensors\": [\r\n    \"{{SensorKey}}\"\r\n ],\r\n  \"Type\": \"{{Type_Custom}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_0_2_004_Error_ExpireDateMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage_fail = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The Parameter ExpireDate is Missing Or Invalid\"\r",
									"var resultDescriptionTheParameterExpireDateIsMissingOrInvalid = pm.globals.get(\"resultDescriptionTheParameterExpireDateIsMissingOrInvalid\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionTheParameterExpireDateIsMissingOrInvalid+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheParameterExpireDateIsMissingOrInvalid); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":1.7091 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":3.3655 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryPullMessageName was successfully.\\\", \\\"processTime\\\":6.2037 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\",\"db.PullMessagesCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage_004;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\",\"Success:InquiryPullMessageName was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage_004;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessagefail_202104231404701\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95O0BX0GjVde9eiznoYDfeOA6X3lEGyqh4UIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"60827c484252b400016e67df\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"60827c4b4252b400016e67e7\\\", \\\"PullMessageName\\\":\\\"Pull_T0175694\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"Custom\\\", \\\"ExpireDate\\\":\\\"2020-12-31T07:58:47.815Z\\\"} }\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_Custom\");\r",
									"                            let ExpireDate = pm.environment.get(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_004_ExpireDate\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The Parameter ExpireDate is Missing Or Invalid\\\"} }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheParameterExpireDateIsMissingOrInvalid);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 70000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Report\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_Custom\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"pm.environment.unset(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_004_ExpireDate\");\r",
									"}, 75000);\r",
									"setTimeout(function(){}, 80000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Report\",fieldDataValue.CreateThingStateInfo.Type_Report)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_Custom\",fieldDataValue.Provisioning.PullMessage.Type_Custom)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"pm.environment.set(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_004_ExpireDate\",fieldDataValue.Provisioning.PullMessage.GeneratePullMessage.Value_PullMessage_GeneratePullMessage_TST_F59_0_2_004_ExpireDate)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Parameter ExpireDate is Missing Or Invalid\"\r",
									"pm.globals.set(\"resultDescriptionTheParameterExpireDateIsMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage_fail\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage_fail);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Report\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"PullMessageName\": \"{{PullMessageName}}\",\r\n  \"Sensors\": [\r\n    \"{{SensorKey}}\"\r\n ],\r\n  \"Type\": \"{{Type_Custom}}\",\r\n    \"ExpireDate\": \"{{Value_PullMessage_GeneratePullMessage_TST_F59_0_2_004_ExpireDate}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_0_2_005_Error_AlreadyExisted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage_fail = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"const x_ais_OrderRef_RemovePullMessage = pm.globals.get(\"x_ais_OrderRef_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"const x_ais_OrderDesc_RemovePullMessage = pm.globals.get(\"x_ais_OrderDesc_RemovePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"var urlPullMessageRemovePullMessage = pm.globals.get(\"urlPullMessageRemovePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"var resultDescriptionRemovePullMessage = pm.globals.get(\"resultDescriptionRemovePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40301\"\r",
									"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
									"//get global variable to resultDescription \"The PullMessageName is Already Existed\"\r",
									"var resultDescriptionThePullMessageNameIsAlreadyExisted = pm.globals.get(\"resultDescriptionThePullMessageNameIsAlreadyExisted\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionThePullMessageNameIsAlreadyExisted+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePullMessageNameIsAlreadyExisted);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemovePullMessage\r",
									"RemovePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PullMessageId\": pm.environment.get(\"GetResponse_PullMessageId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemovePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageRemovePullMessage,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePullMessage,\r",
									"            body: httpRequestRemovePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response RemovePullMessage');\r",
									"        let response = await reqPromise(optionsRemovePullMessage);\r",
									"        let jsonDataRemovePullMessage = await response.json();\r",
									"        // console.log('jsonDataRemovePullMessage',jsonDataRemovePullMessage)\r",
									"    \r",
									"        let operationStatusRemovePullMessage = await jsonDataRemovePullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePullMessage is Success\r",
									"        pm.test('RemovePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionRemovePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Description', resultDescriptionRemovePullMessage);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePullMessageNameIsAlreadyExisted);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePullMessageNameIsAlreadyExisted); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":1.7091 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":3.3655 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.PullMessagesCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryPullMessageName was successfully.\\\", \\\"processTime\\\":6.2037 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\",\"db.PullMessagesCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage_005;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\",\"Success:InquiryPullMessageName was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage_005;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessagefail_202104231404397\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95EI9vQXPwW2A0S2sXS9tjhOvuC4tlIIbY0IlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"60827cea4252b400016e67fa\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"60827cec4252b400016e6802\\\", \\\"PullMessageName\\\":\\\"Pull_T01365767\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"Custom\\\", \\\"ExpireDate\\\":\\\"2021-04-25T07:53:08.396Z\\\"} }\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_Custom\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40301\\\", \\\"Description\\\":\\\"The PullMessageName is Already Existed\\\"} }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePullMessageNameIsAlreadyExisted);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePullMessageNameIsAlreadyExisted);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemovePullMessage();}, 50000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Report\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_Custom\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"pm.environment.unset(\"GeneratePullMessage_Key\");\r",
									"}, 95000);\r",
									"setTimeout(function(){}, 100000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Report\",fieldDataValue.CreateThingStateInfo.Type_Report)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_Custom\",fieldDataValue.Provisioning.PullMessage.Type_Custom)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40301\"\r",
									"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionGeneratePullMessage\", resultDescriptionSuccessList.resultDescriptionGeneratePullMessage);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The PullMessageName is Already Existed\"\r",
									"pm.globals.set(\"resultDescriptionThePullMessageNameIsAlreadyExisted\", resultDescriptionErrorList.resultDescriptionThePullMessageNameIsAlreadyExisted);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage_fail\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage_fail);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"var resultDescriptionGeneratePullMessage = pm.globals.get(\"resultDescriptionGeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"var urlPullMessageGeneratePullMessage = pm.globals.get(\"urlPullMessageGeneratePullMessage\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"const x_ais_OrderRef_GeneratePullMessage = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"const x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Report\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"// GeneratePullMessage\r",
									"GeneratePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptGeneratePullMessage = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_GeneratePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_GeneratePullMessage,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestGeneratePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"PullMessageName\": pm.environment.get(\"PullMessageName\"),\r",
									"                \"Sensors\": [pm.environment.get(\"SensorKey\")], //\"AA\"\r",
									"                \"Type\": pm.environment.get(\"Type_Custom\"), //\"Custom\"\r",
									"                \"ExpireDate\": pm.environment.get(\"Future_Date\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"\r",
									"        let optionsGeneratePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageGeneratePullMessage,\r",
									"            method: 'POST',\r",
									"            header: headersOptGeneratePullMessage,\r",
									"            body: httpRequestGeneratePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response GeneratePullMessage');\r",
									"        let response = await reqPromise(optionsGeneratePullMessage);\r",
									"        let jsonDataGeneratePullMessage = await response.json();\r",
									"        // console.log('jsonDataGeneratePullMessage',jsonDataGeneratePullMessage)\r",
									"    \r",
									"        let operationStatusGeneratePullMessage = await jsonDataGeneratePullMessage.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"GeneratePullMessage : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('GeneratePullMessage : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusGeneratePullMessage).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //GeneratePullMessage  is Success\r",
									"        pm.test('GeneratePullMessage : OperationStatus description is '+'\"'+ resultDescriptionGeneratePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusGeneratePullMessage).to.have.property('Description', resultDescriptionGeneratePullMessage);\r",
									"        });\r",
									"        // GeneratePullMessage_Key\r",
									"        pm.environment.set(\"GeneratePullMessage_Key\",jsonDataGeneratePullMessage.BackupDataInfo.PullMessageKey)\r",
									"        // GetResponse_PullMessageId\r",
									"        pm.environment.set(\"GetResponse_PullMessageId\",jsonDataGeneratePullMessage.BackupDataInfo.PullMessageId)\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await GeneratePullMessage();}, 10000); \r",
									"setTimeout(async function(){}, 15000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"PullMessageName\": \"{{PullMessageName}}\",\r\n  \"Sensors\": [\r\n    \"{{SensorKey}}\"\r\n ],\r\n  \"Type\": \"{{Type_Custom}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_0_2_006_Error_ThingIdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage_fail = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The ThingId is Not Found\"\r",
									"var resultDescriptionErrorTheThingIdIsNotFound = pm.globals.get(\"resultDescriptionErrorTheThingIdIsNotFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionErrorTheThingIdIsNotFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionErrorTheThingIdIsNotFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionErrorTheThingIdIsNotFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionErrorTheThingIdIsNotFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":4.389 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":2.1059 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage_006;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessagefail_202104231404452\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95Aq9ZsNGzmZceeOkghI5+eVw3oHSFyFWX0IlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"60827d884252b400016e686f\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"5f61cf2d51c1f10001fb779b\\\", \\\"PullMessageName\\\":\\\"Pull_T01926969\\\", \\\"Sensors\\\":[\\\"AA\\\" ], \\\"Type\\\":\\\"Custom\\\", \\\"ExpireDate\\\":\\\"2021-04-25T07:55:46.451Z\\\"} }\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_006_ThingId\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"SensorKey\");\r",
									"                            let Type = pm.environment.get(\"Type_Custom\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40400\\\", \\\"Description\\\":\\\"The ThingId is Not Found\\\"} }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionErrorTheThingIdIsNotFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionErrorTheThingIdIsNotFound);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 70000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Report\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_006_ThingId\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_Custom\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 75000);\r",
									"setTimeout(function(){}, 80000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Report\",fieldDataValue.CreateThingStateInfo.Type_Report)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_Custom\",fieldDataValue.Provisioning.PullMessage.Type_Custom)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"pm.environment.set(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_006_ThingId\",fieldDataValue.Provisioning.PullMessage.GeneratePullMessage.Value_PullMessage_GeneratePullMessage_TST_F59_0_2_006_ThingId)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingId is Not Found\"\r",
									"pm.globals.set(\"resultDescriptionErrorTheThingIdIsNotFound\", resultDescriptionErrorList.resultDescriptionErrorTheThingIdIsNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage_fail\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage_fail);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Report\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{Value_PullMessage_GeneratePullMessage_TST_F59_0_2_006_ThingId}}\",\r\n  \"PullMessageName\": \"{{PullMessageName}}\",\r\n  \"Sensors\": [\r\n    \"{{SensorKey}}\"\r\n ],\r\n  \"Type\": \"{{Type_Custom}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "GeneratePullMessage_TST_F59_0_2_007_Error_SensorsNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"var x_ais_OrderRef_GeneratePullMessage_fail = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"var x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The Sensors\"\r",
									"var resultDescriptionTheSensors = pm.globals.get(\"resultDescriptionTheSensors\");\r",
									"//get global variable to resultDescription \" is Not Found\"\r",
									"var resultDescriptionErrorIsNotFound = pm.globals.get(\"resultDescriptionErrorIsNotFound\");\r",
									"var Sensors = pm.environment.get(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_007_Sensors\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GeneratePullMessage : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('GeneratePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionTheSensors + Sensors + resultDescriptionErrorIsNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql( resultDescriptionTheSensors + Sensors + resultDescriptionErrorIsNotFound );\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": pm.environment.get(\"Type_Report\"), //Report\r",
									"                \"stateKey\": pm.environment.get(\"SensorKey\") //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [GeneratePullMessage]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.PullMessage.cmdNameGeneratePullMessage;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.PullMessage.requestObjectUrlGeneratePullMessageMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : GeneratePullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheSensors + Sensors + resultDescriptionErrorIsNotFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheSensors + Sensors + resultDescriptionErrorIsNotFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":4.389 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":2.1059 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_GeneratePullMessage_007;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_GeneratePullMessage_007;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [GeneratePullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [GeneratePullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/PullMessage/GeneratePullMessage\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"GeneratePullMessagefail_202104231404768\\\", \\\"x-ais-orderdesc\\\":\\\"GeneratePullMessage\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGP3PDNBW/95ML04AJwxsO6ymn7MgxhGU7sXbdYpFNnXEIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"60827e234252b400016e688b\\\"},\\\"body\\\":{ \\\"ThingId\\\":\\\"60827e254252b400016e6893\\\", \\\"PullMessageName\\\":\\\"Pull_T01684517\\\", \\\"Sensors\\\":[\\\"aa\\\" ], \\\"Type\\\":\\\"Custom\\\", \\\"ExpireDate\\\":\\\"2021-04-25T07:58:21.768Z\\\"} }\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_GeneratePullMessage_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_GeneratePullMessage;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let PullMessageName = pm.environment.get(\"PullMessageName\");\r",
									"                            let SensorKey = pm.environment.get(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_007_Sensors\");\r",
									"                            let Type = pm.environment.get(\"Type_Custom\");\r",
									"                            let ExpireDate = pm.environment.get(\"Future_Date\");\r",
									"                           \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            console.log(\"resquest.body.PullMessageName : \" + jsonParseRequestObject.body.PullMessageName + \" = \" + PullMessageName);\r",
									"                            console.log(\"resquest.body.Sensors[0] : \" + jsonParseRequestObject.body.Sensors[0] + \" = \" + SensorKey);\r",
									"                            console.log(\"resquest.body.Type : \" + jsonParseRequestObject.body.Type + \" = \" + Type);\r",
									"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.PullMessageName).to.eql(PullMessageName);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[0]).to.eql(SensorKey);\r",
									"                            pm.expect(jsonParseRequestObject.body.Type).to.eql(Type);\r",
									"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40400\\\", \\\"Description\\\":\\\"The Sensors aa is Not Found\\\"} }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionErrorIsNotFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql( resultDescriptionTheSensors + Sensors + resultDescriptionErrorIsNotFound );  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 70000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Type_Report\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_007_Sensors\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"Type_Custom\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"}, 75000);\r",
									"setTimeout(function(){}, 80000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Type_Report\",fieldDataValue.CreateThingStateInfo.Type_Report)\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey_CreateThingStateInfo)\r",
									"pm.environment.set(\"Type_Custom\",fieldDataValue.Provisioning.PullMessage.Type_Custom)\r",
									"// 2021-01-27T02:41:10.996Z\r",
									"var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'days').toJSON();\r",
									"pm.environment.set(\"Future_Date\", futureDate);\r",
									"// console.log('futureDate',futureDate);\r",
									"pm.environment.set(\"Value_PullMessage_GeneratePullMessage_TST_F59_0_2_007_Sensors\",fieldDataValue.Provisioning.PullMessage.GeneratePullMessage.Value_PullMessage_GeneratePullMessage_TST_F59_0_2_007_Sensors)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40301\"\r",
									"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Sensors\"\r",
									"pm.globals.set(\"resultDescriptionTheSensors\", resultDescriptionErrorList.resultDescriptionTheSensors);\r",
									"//set global variable to resultDescription \" is Not Found\"\r",
									"pm.globals.set(\"resultDescriptionErrorIsNotFound\", resultDescriptionErrorList.resultDescriptionErrorIsNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									" //---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessagefail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage_fail\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage_fail);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"        // PullMessageName\r",
									"        let PullMessageNameValue = fieldDataValue.Provisioning.PullMessage.PullMessageNameValue; // \"Pull_T01\"\r",
									"        pm.environment.set(\"PullMessageName\",PullMessageNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[pm.environment.get(\"SensorKey\")] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"    \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": pm.environment.get(\"Type_Report\"),\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 5000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_GeneratePullMessage_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_GeneratePullMessage}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"PullMessageName\": \"{{PullMessageName}}\",\r\n  \"Sensors\": [\r\n    \"{{Value_PullMessage_GeneratePullMessage_TST_F59_0_2_007_Sensors}}\"\r\n ],\r\n  \"Type\": \"{{Type_Custom}}\",\r\n    \"ExpireDate\": \"{{Future_Date}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/PullMessage/GeneratePullMessage",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"PullMessage",
								"GeneratePullMessage"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		}
	]
}