{
	"info": {
		"_postman_id": "33afac56-bca9-4b95-a65f-c5a060d85231",
		"name": "Asgard_HTTP(eSim)_fix",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AsgardHTTPeSimConfig_TST_F2_0_2_003_Error_TokenUntrustedOrInvalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const moment = require('moment');\r",
							"var url = pm.environment.get(\"url\");\r",
							"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
							"\r",
							"//---------------- fieldDataValue --------------//\r",
							"//set variable to fieldDataValue JSON.parse\r",
							"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
							"// console.log('fieldDataValue',fieldDataValue);\r",
							"\r",
							"var Bearer = pm.environment.get(\"Bearer\");\r",
							"var Basic = pm.environment.get(\"Basic\");\r",
							"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
							"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
							"var Accept = pm.environment.get(\"Accept\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals HeaderList --------------//\r",
							"//---------------- get globals Other --------------//\r",
							"//get global variable to x_ais_UserName \"AisPartner\"\r",
							"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
							"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
							"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
							"//---------------- get globals Partner --------------//\r",
							"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
							"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
							"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
							"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals Account --------------//\r",
							"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
							"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
							"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
							"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals Thing --------------//\r",
							"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
							"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
							"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
							"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
							"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
							"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
							"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
							"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals ConfigGroup --------------//\r",
							"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
							"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
							"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
							"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals AsgardHTTP --------------//\r",
							"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
							"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
							"//get global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
							"var x_ais_OrderRef_ConfigHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP_fail\");\r",
							"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
							"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get url Remove --------------//\r",
							"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
							"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
							"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
							"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
							"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
							"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
							"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
							"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
							"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
							"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
							"//------------------------------------------------------------//\r",
							"//get global variable to statusCode 200\r",
							"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
							"//get global variable to statusCode 201\r",
							"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
							"//get global variable to resultCode \"20000\"\r",
							"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
							"//get global variable to resultCode \"20100\"\r",
							"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
							"//get global variable to resultDescription \"RemovePartner is Success\"\r",
							"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
							"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
							"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
							"//get global variable to resultDescription \"RemoveThing is Success\"\r",
							"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
							"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
							"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
							"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
							"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
							"//------------------------------------------------------------//\r",
							"//get global variable to statusCode 401\r",
							"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
							"//get global variable to resultCode \"40103\"\r",
							"var resultCodeTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultCodeTheTokenIsUntrustedOrInvalid\");\r",
							"//get global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
							"var resultDescriptionTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultDescriptionTheTokenIsUntrustedOrInvalid\");\r",
							"//------------------------------------------------------------//\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeUnauthorized, function () {\r",
							"    pm.response.to.have.status(statusCodeUnauthorized);\r",
							"});\r",
							"\r",
							"pm.test('Asgard HTTP(eSim) Config : OperationStatus code is '+'\"'+ resultCodeTheTokenIsUntrustedOrInvalid +'\"', function () {\r",
							"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);\r",
							"});\r",
							"\r",
							"pm.test('Asgard HTTP(eSim) Config : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheTokenIsUntrustedOrInvalid+'\"', function () {\r",
							"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
							"});\r",
							"\r",
							"const reqPromise = (options) => {\r",
							"    return new Promise ((resolve, reject) => {\r",
							"        pm.sendRequest(options, function (err, response) {\r",
							"            if (err) reject(err);\r",
							"            resolve(response);\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// RemovePartner\r",
							" RemovePartner = async () =>  {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptRemovePartner = {\r",
							"            'Content-Type':ContentType_ApplicationJson,\r",
							"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
							"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
							"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
							"            'Accept':Accept\r",
							"        };\r",
							"        \r",
							"        // body\r",
							"        let httpRequestRemovePartner = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
							"            })\r",
							"        };\r",
							"        \r",
							"        let optionsRemovePartner = {\r",
							"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
							"            method: 'DELETE',\r",
							"            header: headersOptRemovePartner,\r",
							"            body: httpRequestRemovePartner\r",
							"        };\r",
							"\r",
							"        // console.log('request RemovePartner');\r",
							"        let response = await reqPromise(optionsRemovePartner);\r",
							"        let jsonDataRemovePartner = await response.json();\r",
							"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
							"    \r",
							"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
							"\r",
							"        //200\r",
							"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        //20000\r",
							"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
							"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"        //RemovePartner is Success\r",
							"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
							"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
							"        });\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err',err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// RemoveAccount\r",
							" RemoveAccount = async () =>  {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptRemoveAccount = {\r",
							"            'Content-Type':ContentType_ApplicationJson,\r",
							"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
							"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
							"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
							"            'Accept':Accept\r",
							"        };\r",
							"        \r",
							"        // body\r",
							"        let httpRequestRemoveAccount = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
							"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
							"            })\r",
							"        };\r",
							"        \r",
							"        let optionsRemoveAccount = {\r",
							"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
							"            method: 'DELETE',\r",
							"            header: headersOptRemoveAccount,\r",
							"            body: httpRequestRemoveAccount\r",
							"        };\r",
							"\r",
							"        // console.log('request RemoveAccount');\r",
							"        let response = await reqPromise(optionsRemoveAccount);\r",
							"        let jsonDataRemoveAccount = await response.json();\r",
							"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
							"    \r",
							"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
							"\r",
							"        //200\r",
							"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        //20000\r",
							"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
							"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"        //RemoveAccount is Success\r",
							"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
							"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
							"        });\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err',err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// RemoveThing\r",
							" RemoveThing = async () =>  {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptRemoveThing = {\r",
							"            'Content-Type':ContentType_ApplicationJson,\r",
							"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
							"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
							"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
							"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
							"            'Accept':Accept\r",
							"        };\r",
							"        \r",
							"        // body\r",
							"        let httpRequestRemoveThing = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsRemoveThing = {\r",
							"            url: url + provisioningapis + urlThingRemoveThing,\r",
							"            method: 'DELETE',\r",
							"            header: headersOptRemoveThing,\r",
							"            body: httpRequestRemoveThing\r",
							"        };\r",
							"\r",
							"        // console.log('request RemoveThing');\r",
							"        let response = await reqPromise(optionsRemoveThing);\r",
							"        let jsonDataRemoveThing = await response.json();\r",
							"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
							"    \r",
							"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
							"\r",
							"        //200\r",
							"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        //20000\r",
							"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
							"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"        //RemoveThing is Success\r",
							"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
							"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
							"        });\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err',err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// RemoveThingStateInfo\r",
							" RemoveThingStateInfo = async () =>  {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptRemoveThingStateInfo = {\r",
							"            'Content-Type':ContentType_ApplicationJson,\r",
							"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
							"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
							"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
							"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
							"            'Accept':Accept\r",
							"            \r",
							"        };\r",
							"        \r",
							"        // body\r",
							"        let httpRequestRemoveThingStateInfo = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
							"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
							"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsRemoveThingStateInfo = {\r",
							"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
							"            method: 'DELETE',\r",
							"            header: headersOptRemoveThingStateInfo,\r",
							"            body: httpRequestRemoveThingStateInfo\r",
							"        };\r",
							"\r",
							"        // console.log('response RemoveThingStateInfo');\r",
							"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
							"        let jsonDataRemoveThingStateInfo = await response.json();\r",
							"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
							"    \r",
							"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
							"\r",
							"        //200\r",
							"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        //20000\r",
							"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
							"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"        //RemoveThingStateInfo is Success\r",
							"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
							"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
							"        });\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err',err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// RemoveConfigGroup\r",
							" RemoveConfigGroup = async () =>  {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptRemoveConfigGroup = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
							"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
							"            'Accept':Accept\r",
							"        };\r",
							"        \r",
							"        // body\r",
							"        let httpRequestRemoveConfigGroup = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsRemoveConfigGroup = {\r",
							"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
							"            method: 'DELETE',\r",
							"            header: headersOptRemoveConfigGroup,\r",
							"            body: httpRequestRemoveConfigGroup\r",
							"        };\r",
							"\r",
							"        // console.log('response RemoveConfigGroup');\r",
							"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
							"        let jsonDataRemoveConfigGroup = await response.json();\r",
							"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
							"    \r",
							"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
							"\r",
							"        //200\r",
							"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        //20000\r",
							"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
							"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"        //RemoveConfigGroup is Success\r",
							"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
							"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
							"        });\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err',err);\r",
							"    }\r",
							"}\r",
							"\r",
							"//---------------- LogDefaultValue --------------//\r",
							"//set variable to LogDefaultValue JSON.parse\r",
							"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
							"// console.log('LogDefaultValue',LogDefaultValue);\r",
							"//---------------- set globals Other --------------//\r",
							"var SearchLog = LogDefaultValue.SearchLog;\r",
							"// console.log('SearchLog',SearchLog);\r",
							"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
							"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
							"var kbn_version = SearchLog.header.kbn_version;\r",
							"var authorization = SearchLog.header.Authorization;\r",
							"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
							"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
							"var namespace = LogDefaultValue.Other.namespace;\r",
							"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
							"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
							"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
							"var methodGet = LogDefaultValue.Other.methodGet;\r",
							"\r",
							"// Detail\r",
							"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
							"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
							"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
							"\r",
							"// Summary\r",
							"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
							"var identitySummary = \"\";\r",
							"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
							"\r",
							"// Asgard.Http.APIs\r",
							"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
							"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
							"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
							"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
							"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
							"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfigError;\r",
							"\r",
							"// Check CDR (Summary Log) and EDR (Detail Log)\r",
							"SearchLogFindTid = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptSearchLogFindTid = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'kbn-version': kbn_version,\r",
							"            'Authorization': authorization\r",
							"        };\r",
							"\r",
							"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
							"        let setRangeLTE = moment().toJSON();\r",
							"        let valueSearch = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
							"        // console.log(setRangeGTE)\r",
							"        // console.log(setRangeLTE)\r",
							"        console.log(\"valueSearch\",valueSearch)\r",
							"            \r",
							"        // body\r",
							"        let httpRequestSearchLogFindTid = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
							"        };\r",
							"\r",
							"        let optionsSearchLogFindTid = {\r",
							"            url: url_staging_azure_cauldron ,\r",
							"            method: 'POST',\r",
							"            header: headersOptSearchLogFindTid,\r",
							"            body: httpRequestSearchLogFindTid\r",
							"        };\r",
							"\r",
							"        // console.log('request CreatePartner');\r",
							"        let response = await reqPromise(optionsSearchLogFindTid);\r",
							"        let jsonDataSearchLogFindTid = await response.json();\r",
							"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
							"\r",
							"        // //200\r",
							"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"\r",
							"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
							"        // console.log('hits',hits)\r",
							"  \r",
							"        // find tid\r",
							"        for(let i=0;i<hits.length;i++){\r",
							"            // let logType = hits[i]._source.cauldron.logType;\r",
							"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
							"        \r",
							"            // console.log('logType',logType)\r",
							"            // console.log('applicationNameValue',applicationNameValue)\r",
							"            // console.log('applicationName',applicationName)\r",
							"            if(applicationNameValue == applicationName){\r",
							"                let tid = hits[i]._source.cauldron.tid;\r",
							"                pm.environment.set(\"tid\", tid);\r",
							"                break;\r",
							"           }\r",
							"        }\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"CheckLog = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptCheckLog = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'kbn-version': kbn_version,\r",
							"            'Authorization': authorization\r",
							"        };\r",
							"\r",
							"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
							"        let setRangeLTE = moment().toJSON();\r",
							"        let valueSearch = pm.environment.get(\"tid\");\r",
							"\r",
							"        // console.log(setRangeGTE)\r",
							"        // console.log(setRangeLTE)\r",
							"        console.log(\"valueSearch\",valueSearch)\r",
							"            \r",
							"        // body\r",
							"        let httpRequestCheckLog = {\r",
							"            mode: 'raw',\r",
							"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
							"        };\r",
							"        let optionsCheckLog = {\r",
							"            url: url_staging_azure_cauldron ,\r",
							"            method: 'POST',\r",
							"            header: headersOptCheckLog,\r",
							"            body: httpRequestCheckLog\r",
							"        }; \r",
							"        let response = await reqPromise(optionsCheckLog);\r",
							"        let jsonDataCheckLog = await response.json();\r",
							"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
							"        \r",
							"        // //200\r",
							"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });     \r",
							"        \r",
							"        let hits = jsonDataCheckLog.hits.hits\r",
							"        console.log('hits',hits)\r",
							"  \r",
							"        // find logType\r",
							"        for(let i=0;i<hits.length;i++){\r",
							"            //  let logType = hits[i]._source.cauldron.logType\r",
							"            let logType = hits[i]._source.cauldron.logType;\r",
							"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
							"           \r",
							"            // console.log('logType',logType)\r",
							"            // console.log('applicationNameValue',applicationNameValue)\r",
							"            // console.log('applicationName',applicationName)\r",
							"            \r",
							"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
							"            // console.log('resultDataLog',resultDataLog)\r",
							"\r",
							"            let tidControl = x_ais_OrderRef_ConfigHTTP_fail  + current_timestamp;\r",
							"            // console.log(tidControl);\r",
							"            if(applicationNameValue == applicationName){\r",
							"                 \r",
							"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
							"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
							"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
							"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
							"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
							"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
							"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
							"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
							"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
							"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
							"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
							"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
							"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
							"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
							"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
							"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
							"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
							"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
							"\r",
							"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
							"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
							"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheTokenIsUntrustedOrInvalid); \r",
							"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
							"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
							"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
							"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
							"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
							"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
							"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
							"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
							"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
							"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
							"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
							"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
							"                    }); \r",
							"                }\r",
							"\r",
							"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
							"\r",
							"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
							"                    // console.log('endPointNameValue ',endPointNameValue)\r",
							"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
							"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
							"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
							"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
							"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
							"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
							"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
							"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
							"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
							"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
							"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
							"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
							"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
							"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
							"\r",
							"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
							"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
							"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
							"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
							"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
							"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
							"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
							"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
							"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
							"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
							"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
							"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
							"\r",
							"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
							"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
							"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
							"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
							"                        let url = urlConfig; \r",
							"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
							"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
							"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
							"                        // let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
							"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
							"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
							"                        let timestamp = pm.environment.get(\"timestamp\");\r",
							"\r",
							"                        if( endPointNameValue == undefined){\r",
							"                            // check requestObject\r",
							"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZmYxMjEwZjgtNGFjYi00YjNjLTkwMTMtODc0YWM0ZGIxZGVieHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTPfail_202102152002008\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a99d5f91-ea7c-4695-b941-0dea110169a2\\\",\\\"x-request-id\\\":\\\"cc1ffc3a-c815-4299-ac4a-9250d7064fa8\\\",\\\"x-b3-traceid\\\":\\\"55b1fe4d9548fdbb017552c523e0afcd\\\",\\\"x-b3-spanid\\\":\\\"017552c523e0afcd\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613397270624\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"RefreshTime\\\"},\\\"routeParamteters\\\":{}}\"\r",
							"\r",
							"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTPfail_202105112105928\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"dba87308-ecc0-4596-938f-43c3a0e650d3\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"30b30daf-ee8b-4092-b18b-c19e03980d98\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1?Sensor=RefreshTime\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"c705cca19c6c94d7ee7f2aee1b5e4cc5\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"d81023b84cdc62dd\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"ee7f2aee1b5e4cc5\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620743083741\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"RefreshTime\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
							"\r",
							"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
							"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
							"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
							"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
							"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
							"                            // console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
							"\r",
							"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
							"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
							"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
							"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
							"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
							"                            // pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
							"\r",
							"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"RefreshTime\"));\r",
							"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
							"\r",
							"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"RefreshTime\"); \r",
							"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
							"\r",
							"                            // check responseObject\r",
							"                            // \"responseObject\":\"{\\\"Config\\\":null,\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40103\\\",\\\"DeveloperMessage\\\":\\\"The token is Untrusted or Invalid.\\\"}}\"\r",
							"\r",
							"                            console.log(\"response.Config : \" + jsonParseResponseObject.Config + \" = \" + null);\r",
							"                            pm.expect(jsonParseResponseObject.Config).to.eql(null);  \r",
							"\r",
							"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
							"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
							"\r",
							"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);  \r",
							"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);  \r",
							"                        }\r",
							"                    }); \r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
							"setTimeout(function(){CheckLog();}, 60000); \r",
							"\r",
							"setTimeout(function(){RemoveConfigGroup();}, 70000); \r",
							"setTimeout(function(){RemoveThingStateInfo();}, 80000); \r",
							"setTimeout(function(){RemoveThing();}, 90000); \r",
							"setTimeout(function(){RemoveAccount();}, 100000); \r",
							"setTimeout(function(){RemovePartner();}, 110000); \r",
							"\r",
							"setTimeout(function(){\r",
							"pm.environment.unset(\"current_timestamp\");\r",
							"pm.environment.unset(\"AccessToken\");\r",
							"pm.environment.unset(\"random_number\");\r",
							"pm.environment.unset(\"PartnerName\");\r",
							"pm.environment.unset(\"MerchantContact\");\r",
							"pm.environment.unset(\"CPID\");\r",
							"pm.environment.unset(\"GetResponse_PartnerId\");\r",
							"pm.environment.unset(\"AccountName\");\r",
							"pm.environment.unset(\"GetResponse_AccountName\");\r",
							"pm.environment.unset(\"GetResponse_AccountId\");\r",
							"pm.environment.unset(\"random_IM\");\r",
							"pm.environment.unset(\"random_ICCID\");\r",
							"pm.environment.unset(\"ThingName\");\r",
							"pm.environment.unset(\"GetResponse_ThingID\");\r",
							"pm.environment.unset(\"GetResponse_IMSI\");\r",
							"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
							"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
							"pm.environment.unset(\"random_Sensor\");\r",
							"pm.environment.unset(\"GetResponse_ThingToken\");\r",
							"pm.environment.unset(\"tid\");\r",
							"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
							"pm.environment.unset(\"ConfigGroupName\");\r",
							"}, 125000); \r",
							"setTimeout(async function(){}, 130000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment');\r",
							"var Username = pm.environment.get(\"Username\");\r",
							"var Password = pm.environment.get(\"Password\");\r",
							"\r",
							"var url = pm.environment.get(\"url\");\r",
							"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
							"var httpapis = pm.environment.get(\"httpapis\");\r",
							"\r",
							"//---------------- fieldDataValue --------------//\r",
							"//set variable to fieldDataValue JSON.parse\r",
							"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
							"// console.log('fieldDataValue',fieldDataValue);\r",
							"\r",
							"//format YYYYMMDDHHMMSSS\r",
							"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
							"// console.log('currentTmestamp',currentTmestamp);\r",
							"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
							"\r",
							"var Bearer = pm.environment.get(\"Bearer\");\r",
							"var Basic = pm.environment.get(\"Basic\");\r",
							"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
							"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
							"var Accept = pm.environment.get(\"Accept\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- statusCodeList --------------//\r",
							"//set variable to statusCodeList JSON.parse\r",
							"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
							"//set global variable to statusCode 200\r",
							"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
							"//set global variable to statusCode 201\r",
							"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
							"//set global variable to statusCode 401\r",
							"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- resultCodeList --------------//\r",
							"//set variable to resultCodeList JSON.parse\r",
							"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
							"//set global variable to resultCode \"20000\"\r",
							"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
							"//set global variable to resultCode \"20100\"\r",
							"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
							"//set global variable to resultCode \"40103\"\r",
							"pm.globals.set(\"resultCodeTheTokenIsUntrustedOrInvalid\", resultCodeList.resultCodeTheTokenIsUntrustedOrInvalid);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- resultDescriptionSuccessList --------------//\r",
							"//set variable to resultDescriptionList JSON.parse\r",
							"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
							"//set global variable to resultDescription \"SignInProcess is Success\"\r",
							"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
							"//set global variable to resultDescription \"CreatePartner is Success\"\r",
							"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
							"//set global variable to resultDescription \"CreateAccount is Success\"\r",
							"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
							"//set global variable to resultDescription \"CreateThing is Success\"\r",
							"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
							"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
							"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
							"//set global variable to resultDescription \"RemovePartner is Success\"\r",
							"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
							"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
							"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
							"//set global variable to resultDescription \"RemoveThing is Success\"\r",
							"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
							"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
							"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
							"//set global variable to resultDescription \"Register is Success\"\r",
							"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
							"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
							"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
							"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
							"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
							"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
							"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
							"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
							"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- resultDescriptionErrorList --------------//\r",
							"//set variable to resultDescriptionList JSON.parse\r",
							"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
							"//set global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
							"pm.globals.set(\"resultDescriptionTheTokenIsUntrustedOrInvalid\", resultDescriptionErrorList.resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- HeaderList --------------//\r",
							"//set variable to HeaderList JSON.parse\r",
							"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
							"//---------------- set globals Other --------------//\r",
							"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
							"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
							"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
							"//set global variable to kbn-versio \"7.5.1\"\r",
							"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- set globals Signin_ --------------//\r",
							"//set global variable to x_ais_OrderRef \"Signin_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- set globals CreatePartner --------------//\r",
							"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
							"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
							"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
							"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- set globals CreateAccount --------------//\r",
							"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
							"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
							"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
							"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- set globals Thing --------------//\r",
							"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
							"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
							"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
							"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
							"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
							"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
							"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
							"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- set globals AsgardHTTP --------------//\r",
							"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
							"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
							"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
							"//set global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP_fail);\r",
							"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
							"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
							"//------------------------------------------------------------//\r",
							"//---------------- set globals ConfigGroup --------------//\r",
							"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
							"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
							" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
							"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
							"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
							"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
							"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
							"//------------------------------------------------------------//\r",
							"//get global variable to statusCode 200\r",
							"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
							"//get global variable to statusCode 201\r",
							"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
							"//get global variable to resultCode \"20000\"\r",
							"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
							"//get global variable to resultCode \"20100\"\r",
							"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
							"//get global variable to resultDescription \"SignInProcess is Success\"\r",
							"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
							"//get global variable to resultDescription \"CreatePartner is Success\"\r",
							"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
							"//get global variable to resultDescription \"CreateAccount is Success\"\r",
							"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
							"//get global variable to resultDescription \"CreateThing is Success\"\r",
							"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
							"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
							"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
							"//get global variable to resultDescription \"Register is Success\"\r",
							"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
							"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
							"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
							"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
							"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- urlRouteList --------------//\r",
							"//set variable to urlRouteList JSON.parse\r",
							"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
							"//---------------- set url Create --------------//\r",
							"//set global variable to url \"/api/v1/auth/signin\"\r",
							"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
							"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
							"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
							"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
							"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
							"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
							"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
							"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
							"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
							"//set global variable to url \"/api/register/sim/v1\"\r",
							"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
							"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
							"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
							"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
							"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
							"//---------------- get url Create --------------//\r",
							"//get global variable to url \"/api/v1/auth/signin\"\r",
							"var urlSignin = pm.globals.get(\"urlSignin\");\r",
							"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
							"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
							"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
							"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
							"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
							"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
							"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
							"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
							"//get global variable to url \"/api/register/sim/v1\"\r",
							"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
							"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
							"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
							"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
							"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
							"//---------------- set url Remove --------------//\r",
							"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
							"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
							"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
							"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
							"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
							"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
							"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
							"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
							"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
							"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals HeaderList --------------//\r",
							"//---------------- get globals Other --------------//\r",
							"//get global variable to x_ais_UserName \"AisPartner\"\r",
							"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
							"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
							"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
							"//---------------- get globals Signin_ --------------//\r",
							"//get global variable to x_ais_OrderRef \"Signin_\"\r",
							"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals Partner --------------//\r",
							"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
							"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
							"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
							"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals Account --------------//\r",
							"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
							"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
							"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
							"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals Thing --------------//\r",
							"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
							"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
							"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
							"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
							"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
							"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
							"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
							"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals AsgardHTTP --------------//\r",
							"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
							"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
							"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
							"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
							"//------------------------------------------------------------//\r",
							"//---------------- get globals ConfigGroup --------------//\r",
							"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
							"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
							"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
							"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
							"//------------------------------------------------------------//\r",
							"\r",
							"const reqPromise = (options) => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest(options, function (err, response) {\r",
							"            if (err) reject(err);\r",
							"            resolve(response);\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// Signin get token\r",
							"Signin = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptSignin = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
							"            'Accept': Accept\r",
							"        };\r",
							"\r",
							"        // body\r",
							"        let httpRequestSignin = {\r",
							"            mode: 'raw',\r",
							"            raw:\r",
							"                JSON.stringify({\r",
							"                    username: Username,\r",
							"                    password: Password\r",
							"                })\r",
							"        };\r",
							"\r",
							"        let optionsSignin = {\r",
							"            url: url + provisioningapis + urlSignin,\r",
							"            method: 'POST',\r",
							"            header: headersOptSignin,\r",
							"            body: httpRequestSignin\r",
							"        };\r",
							"        // console.log('request Signin');\r",
							"        let response = await reqPromise(optionsSignin);\r",
							"        let jsonDataSignin = await response.json();\r",
							"\r",
							"        // setAccessToken\r",
							"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
							"\r",
							"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
							"\r",
							"        // 200\r",
							"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        // 20000\r",
							"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
							"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"        // SignInProcess is Success\r",
							"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
							"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
							"        });\r",
							"\r",
							"        //set random_number\r",
							"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
							"        //set PartnerName\r",
							"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
							"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
							"        //set MerchantContact\r",
							"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
							"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
							"        // set CPID\r",
							"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
							"        pm.environment.set(\"CPID\", CPIDValue)\r",
							"\r",
							"        //ConfigGroupName\r",
							"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
							"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// CreatePartner\r",
							"CreatePartner = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptCreatePartner = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
							"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'Accept': Accept\r",
							"        };\r",
							"\r",
							"        // body\r",
							"        let httpRequestCreatePartner = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
							"                \"PartnerType\": [\r",
							"                    \"Supplier\",\r",
							"                    \"Customer\"\r",
							"                ],\r",
							"                \"PartnerDetail\": {\r",
							"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
							"                    \"CPID\": pm.environment.get(\"CPID\")\r",
							"                },\r",
							"                \"Property\": {\r",
							"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
							"                }\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsCreatePartner = {\r",
							"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
							"            method: 'POST',\r",
							"            header: headersOptCreatePartner,\r",
							"            body: httpRequestCreatePartner\r",
							"        };\r",
							"\r",
							"        // console.log('request CreatePartner');\r",
							"        let response = await reqPromise(optionsCreatePartner);\r",
							"        let jsonDataCreatePartner = await response.json();\r",
							"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
							"\r",
							"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
							"\r",
							"        //201\r",
							"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
							"        });\r",
							"        //20100\r",
							"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
							"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
							"        });\r",
							"        //CreatePartner is Success\r",
							"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
							"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
							"        });\r",
							"\r",
							"        //GetResponse_PartnerId\r",
							"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
							"\r",
							"        //Accountname\r",
							"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
							"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// CreateAccount\r",
							"CreateAccount = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptCreateAccount = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
							"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'Accept': Accept\r",
							"        };\r",
							"\r",
							"        // body\r",
							"        let httpRequestCreateAccount = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
							"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsCreateAccount = {\r",
							"            url: url + provisioningapis + urlAccountCreateAccount,\r",
							"            method: 'POST',\r",
							"            header: headersOptCreateAccount,\r",
							"            body: httpRequestCreateAccount\r",
							"        };\r",
							"\r",
							"        // console.log('request CreateAccount');\r",
							"        let response = await reqPromise(optionsCreateAccount);\r",
							"        let jsonDataCreateAccount = await response.json();\r",
							"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
							"\r",
							"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
							"\r",
							"        //201\r",
							"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
							"        });\r",
							"        //20100\r",
							"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
							"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
							"        });\r",
							"        //CreateAccount is Success\r",
							"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
							"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
							"        });\r",
							"        // GetResponse_AccountName\r",
							"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
							"        // GetResponse_AccountId\r",
							"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
							"        // random_IM\r",
							"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
							"        // random_ICCID\r",
							"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
							"        // random_number\r",
							"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
							"        //ThingName\r",
							"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
							"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// CreateThing\r",
							"CreateThing = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptCreateThing = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
							"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
							"            'Accept': Accept\r",
							"        };\r",
							"\r",
							"        // body\r",
							"        let httpRequestCreateThing = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
							"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
							"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
							"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
							"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
							"                \"RouteInfo\": {\r",
							"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
							"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
							"                },\r",
							"                \"RouteFlag\": {\r",
							"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
							"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
							"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
							"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
							"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
							"                }\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsCreateThing = {\r",
							"            url: url + provisioningapis + urlThingCreateThing,\r",
							"            method: 'POST',\r",
							"            header: headersOptCreateThing,\r",
							"            body: httpRequestCreateThing\r",
							"        };\r",
							"\r",
							"        // console.log('request CreateThing');\r",
							"        let response = await reqPromise(optionsCreateThing);\r",
							"        let jsonDataCreateThing = await response.json();\r",
							"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
							"\r",
							"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
							"\r",
							"        //201\r",
							"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
							"        });\r",
							"        //20100\r",
							"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
							"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
							"        });\r",
							"        //CreateThing is Success\r",
							"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
							"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
							"        });\r",
							"\r",
							"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
							"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
							"        \r",
							"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
							"        // console.log(\"keys\", keys);\r",
							"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
							"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
							"\r",
							"        //Get Random Sensor \r",
							"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// CreateThingStateInfo\r",
							"CreateThingStateInfo = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptCreateThingStateInfo = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
							"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
							"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
							"            'Accept': Accept\r",
							"        };\r",
							"\r",
							"        // body\r",
							"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
							"        let sensorValue = {};\r",
							"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
							"        // console.log('sensorValue',sensorValue);\r",
							"        \r",
							"        let httpRequestCreateThingStateInfo = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"ThingId\": [\r",
							"                    pm.environment.get(\"GetResponse_ThingID\")\r",
							"                ],\r",
							"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
							"                \"Sensor\": sensorValue\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsCreateThingStateInfo = {\r",
							"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
							"            method: 'POST',\r",
							"            header: headersOptCreateThingStateInfo,\r",
							"            body: httpRequestCreateThingStateInfo\r",
							"        };\r",
							"\r",
							"        // console.log('request CreateThingStateInfo');\r",
							"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
							"        let jsonDataCreateThingStateInfo = await response.json();\r",
							"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
							"\r",
							"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
							"\r",
							"        //200\r",
							"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        //20000\r",
							"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
							"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"        //CreateThingStateInfo is Success\r",
							"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
							"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
							"        });\r",
							"\r",
							"       \r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// CreateConfigGroup\r",
							"CreateConfigGroup = async () =>  {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptCreateConfigGroup = {\r",
							"            'Content-Type':ContentType_ApplicationJson,\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
							"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
							"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
							"        };\r",
							"        \r",
							"        // body\r",
							"        let httpRequestCreateConfigGroup = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
							"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
							"                \"ConfigInfo\": {\r",
							"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
							"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
							"                }\r",
							"            })\r",
							"        };\r",
							"\r",
							"        let optionsCreateConfigGroup = {\r",
							"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
							"            method: 'POST',\r",
							"            header: headersOptCreateConfigGroup,\r",
							"            body: httpRequestCreateConfigGroup\r",
							"        };\r",
							"\r",
							"        // console.log('response CreateConfigGroup');\r",
							"        let response = await reqPromise(optionsCreateConfigGroup);\r",
							"        let jsonDataCreateConfigGroup = await response.json();\r",
							"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
							"    \r",
							"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
							"\r",
							"        //201\r",
							"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
							"        });\r",
							"        //20100\r",
							"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
							"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
							"        });\r",
							"        //CreateConfigGroup is Success\r",
							"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
							"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
							"        });\r",
							"\r",
							"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err',err);\r",
							"    }\r",
							"}\r",
							"\r",
							"// AsgardHTTPeSimRegister\r",
							"AsgardHTTPeSimRegister = async () => {\r",
							"    try {\r",
							"        // header\r",
							"        let headersOptAsgardHTTPeSimRegister = {\r",
							"            'Content-Type': ContentType_ApplicationJson,\r",
							"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
							"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
							"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
							"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
							"        };\r",
							"\r",
							"        // body\r",
							"        let httpRequestAsgardHTTPeSimRegister = {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({})\r",
							"        };\r",
							"\r",
							"        let optionsAsgardHTTPeSimRegister = {\r",
							"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
							"            method: 'POST',\r",
							"            header: headersOptAsgardHTTPeSimRegister,\r",
							"            body: httpRequestAsgardHTTPeSimRegister\r",
							"        };\r",
							"\r",
							"        // console.log('request AsgardHTTPEsimRegister');\r",
							"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
							"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
							"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
							"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
							"\r",
							"        //200\r",
							"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
							"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
							"        });\r",
							"        //20000\r",
							"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
							"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
							"        });\r",
							"\r",
							"        // The requested operation was successfully.\r",
							"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
							"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
							"        });\r",
							"\r",
							"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
							"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
							"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
							"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
							"\r",
							"    } catch (err) {\r",
							"        console.log('err', err);\r",
							"    }\r",
							"}\r",
							"\r",
							"Signin();\r",
							"setTimeout(async function(){await CreatePartner();}, 3000); \r",
							"setTimeout(async function(){await CreateAccount();}, 6000); \r",
							"setTimeout(async function(){await CreateThing();}, 8000); \r",
							"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
							"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
							"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
							"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-ais-UserName",
						"type": "text",
						"value": "{{x_ais_UserName_AisPartner}}"
					},
					{
						"key": "x-ais-OrderRef",
						"value": "{{x_ais_OrderRef_ConfigHTTP_fail}}{{current_timestamp}}"
					},
					{
						"key": "x-ais-OrderDesc",
						"type": "text",
						"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{Basic}} {{encodedKeys_Authorization_Config}}",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{url}}{{httpapis}}/api/config/sim/v1?Sensor=RefreshTime",
					"host": [
						"{{url}}{{httpapis}}"
					],
					"path": [
						"api",
						"config",
						"sim",
						"v1"
					],
					"query": [
						{
							"key": "Sensor",
							"value": "RefreshTime"
						}
					]
				},
				"description": "Type:Desire"
			},
			"response": []
		}
	]
}