{
	"info": {
		"_postman_id": "7c15b537-1bd1-4588-9cf8-d21f2307345a",
		"name": "Provisioning_Account",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Account",
			"item": [
				{
					"name": "CreateAccount",
					"item": [
						{
							"name": "CreateAccount_TST_F6_1_1_001_Success_RootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartnerIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdatePartnerIsSuccess);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 6000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"// console.log(\"jsonData : : : : :\",jsonData)\r",
											"// Set Response_AccountId\r",
											"pm.environment.set(\"GetResponse_AccountId\",jsonData.PartnerInfo.AccountInfo[0].AccountId)\r",
											"// Set GetResponse_CreateDate\r",
											"pm.environment.set(\"GetResponse_CreateDate\",jsonData.PartnerInfo.CreateDate)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionCreateAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionCreateAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionCreateAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":10.4812 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":3.1593 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InsertAccount was successfully.\", \"processTime\":1.0202 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_CreateAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccountName was successfully.\",\"Success:InsertAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_CreateAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);                  \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");   \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"PartnerTypeValue\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"PropertyRouteEngineValue\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let CreateDate = pm.environment.get(\"GetResponse_CreateDate\");\r",
											"                            \r",
											"                            \r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerName).to.eql(PartnerName); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerType).to.eql(PartnerType);                           \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID).to.eql(PartnerDetailCPID);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId).to.eql(AccountId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName).to.eql(Accountname); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.CreateDate).to.eql(CreateDate);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.Property.RouteEngine).to.eql(PropertyRouteEngine);     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionCreateAccount);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.PartnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.PartnerInfo.PartnerName + \" = \" + PartnerName);  \r",
											"                            console.log(\"response.PartnerInfo.PartnerType : \" + jsonParseResponseObject.PartnerInfo.PartnerType + \" = \" + PartnerType);                  \r",
											"                            console.log(\"response.PartnerInfo.MerchantContact : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact); \r",
											"                            console.log(\"response.PartnerInfo.CPID : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"response.PartnerInfo.AccountId : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId + \" = \" + AccountId); \r",
											"                            console.log(\"response.PartnerInfo.AccountName : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName + \" = \" + Accountname);\r",
											"                            console.log(\"response.PartnerInfo.CreateDate : \" + jsonParseResponseObject.PartnerInfo.CreateDate + \" = \" + CreateDate); \r",
											"                            console.log(\"response.PartnerInfo.RouteEngine : \" + jsonParseResponseObject.PartnerInfo.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionCreateAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo;\r",
											"        console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"        for(let i=0;i<AccountInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : CreateAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"PartnerId : \" + AccountInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"AccountName : \" + AccountInfo[i].AccountInfo[0].AccountName + \" = \" + pm.environment.get(\"AccountName\"));\r",
											"                console.log(\"AccountId : \" + AccountInfo[i].AccountInfo[0].AccountId + \" = \" + pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                console.log(\"CreateDate : \" + AccountInfo[i].CreateDate + \" = \" + pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"            \r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo[i].PartnerId).to.eql(pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountName).to.eql(pm.environment.get(\"AccountName\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountId).to.eql(pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                pm.expect(AccountInfo[i].CreateDate).to.eql(pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"\r",
											"            });\r",
											"        }\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 12000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"setTimeout(function(){InquiryAccount();}, 40000);\r",
											"setTimeout(function(){RemoveAccount();}, 50000);\r",
											"setTimeout(function(){RemovePartner();}, 60000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"GetResponse_CreateDate\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{GetResponse_PartnerId}}\",\r\n  \"Accountname\": \"{{AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreateAccount_TST_F6_1_1_002_Success_SupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartnerIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdatePartnerIsSuccess);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        // console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){}, 10000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"// console.log(\"jsonData : : : : :\",jsonData)\r",
											"// Set Response_AccountId\r",
											"pm.environment.set(\"GetResponse_AccountId\",jsonData.PartnerInfo.AccountInfo[0].AccountId)\r",
											"// Set GetResponse_CreateDate\r",
											"pm.environment.set(\"GetResponse_CreateDate\",jsonData.PartnerInfo.CreateDate)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionCreateAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionCreateAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionCreateAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":10.4812 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":3.1593 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InsertAccount was successfully.\", \"processTime\":1.0202 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_CreateAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccountName was successfully.\",\"Success:InsertAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_CreateAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);                  \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");   \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"PartnerTypeValue\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"PropertyRouteEngineValue\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let CreateDate = pm.environment.get(\"GetResponse_CreateDate\");\r",
											"                            \r",
											"                            \r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerName).to.eql(PartnerName); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerType).to.eql(PartnerType);                           \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID).to.eql(PartnerDetailCPID);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId).to.eql(AccountId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName).to.eql(Accountname); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.CreateDate).to.eql(CreateDate);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.Property.RouteEngine).to.eql(PropertyRouteEngine);     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionCreateAccount);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.PartnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.PartnerInfo.PartnerName + \" = \" + PartnerName);  \r",
											"                            console.log(\"response.PartnerInfo.PartnerType : \" + jsonParseResponseObject.PartnerInfo.PartnerType + \" = \" + PartnerType);                  \r",
											"                            console.log(\"response.PartnerInfo.MerchantContact : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact); \r",
											"                            console.log(\"response.PartnerInfo.CPID : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"response.PartnerInfo.AccountId : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId + \" = \" + AccountId); \r",
											"                            console.log(\"response.PartnerInfo.AccountName : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName + \" = \" + Accountname);\r",
											"                            console.log(\"response.PartnerInfo.CreateDate : \" + jsonParseResponseObject.PartnerInfo.CreateDate + \" = \" + CreateDate); \r",
											"                            console.log(\"response.PartnerInfo.RouteEngine : \" + jsonParseResponseObject.PartnerInfo.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionCreateAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo;\r",
											"        console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"        for(let i=0;i<AccountInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : CreateAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"PartnerId : \" + AccountInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"AccountName : \" + AccountInfo[i].AccountInfo[0].AccountName + \" = \" + pm.environment.get(\"AccountName\"));\r",
											"                console.log(\"AccountId : \" + AccountInfo[i].AccountInfo[0].AccountId + \" = \" + pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                console.log(\"CreateDate : \" + AccountInfo[i].CreateDate + \" = \" + pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"            \r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo[i].PartnerId).to.eql(pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountName).to.eql(pm.environment.get(\"AccountName\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountId).to.eql(pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                pm.expect(AccountInfo[i].CreateDate).to.eql(pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"\r",
											"            });\r",
											"        }\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 14000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"setTimeout(function(){InquiryAccount();}, 40000);\r",
											"setTimeout(function(){RemoveAccount();}, 50000);\r",
											"setTimeout(function(){RemovePartner();}, 60000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"GetResponse_CreateDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{GetResponse_PartnerId}}\",\r\n  \"Accountname\": \"{{AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreateAccount_TST_F6_1_1_003_Success_CustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartnerIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdatePartnerIsSuccess);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){}, 10000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"// console.log(\"jsonData : : : : :\",jsonData)\r",
											"// Set Response_AccountId\r",
											"pm.environment.set(\"GetResponse_AccountId\",jsonData.PartnerInfo.AccountInfo[0].AccountId)\r",
											"// Set GetResponse_CreateDate\r",
											"pm.environment.set(\"GetResponse_CreateDate\",jsonData.PartnerInfo.CreateDate)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionCreateAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionCreateAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionCreateAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":10.4812 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":3.1593 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InsertAccount was successfully.\", \"processTime\":1.0202 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_CreateAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccountName was successfully.\",\"Success:InsertAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_CreateAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);                  \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");   \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"PartnerTypeValue\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"PropertyRouteEngineValue\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let CreateDate = pm.environment.get(\"GetResponse_CreateDate\");\r",
											"                            \r",
											"                            \r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerName).to.eql(PartnerName); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerType).to.eql(PartnerType);                           \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID).to.eql(PartnerDetailCPID);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId).to.eql(AccountId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName).to.eql(Accountname); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.CreateDate).to.eql(CreateDate);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.Property.RouteEngine).to.eql(PropertyRouteEngine);     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionCreateAccount);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.PartnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.PartnerInfo.PartnerName + \" = \" + PartnerName);  \r",
											"                            console.log(\"response.PartnerInfo.PartnerType : \" + jsonParseResponseObject.PartnerInfo.PartnerType + \" = \" + PartnerType);                  \r",
											"                            console.log(\"response.PartnerInfo.MerchantContact : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact); \r",
											"                            console.log(\"response.PartnerInfo.CPID : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"response.PartnerInfo.AccountId : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId + \" = \" + AccountId); \r",
											"                            console.log(\"response.PartnerInfo.AccountName : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName + \" = \" + Accountname);\r",
											"                            console.log(\"response.PartnerInfo.CreateDate : \" + jsonParseResponseObject.PartnerInfo.CreateDate + \" = \" + CreateDate); \r",
											"                            console.log(\"response.PartnerInfo.RouteEngine : \" + jsonParseResponseObject.PartnerInfo.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionCreateAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo;\r",
											"        console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"        for(let i=0;i<AccountInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : CreateAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"PartnerId : \" + AccountInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"AccountName : \" + AccountInfo[i].AccountInfo[0].AccountName + \" = \" + pm.environment.get(\"AccountName\"));\r",
											"                console.log(\"AccountId : \" + AccountInfo[i].AccountInfo[0].AccountId + \" = \" + pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                console.log(\"CreateDate : \" + AccountInfo[i].CreateDate + \" = \" + pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"            \r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo[i].PartnerId).to.eql(pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountName).to.eql(pm.environment.get(\"AccountName\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountId).to.eql(pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                pm.expect(AccountInfo[i].CreateDate).to.eql(pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"\r",
											"            });\r",
											"        }\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 14000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"setTimeout(function(){InquiryAccount();}, 40000);\r",
											"setTimeout(function(){RemoveAccount();}, 50000);\r",
											"setTimeout(function(){RemovePartner();}, 60000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"GetResponse_CreateDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{GetResponse_PartnerId}}\",\r\n  \"Accountname\": \"{{AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreateAccount_TST_F6_0_2_002_Error_AccountNameAlreadyUse",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40301\"\r",
											"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartnerIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdatePartnerIsSuccess);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The Account Name Is Already Existed\"\r",
											"pm.globals.set(\"resultDescriptionTheAccountNameIsAlreadyExisted\", resultDescriptionErrorList.resultDescriptionTheAccountNameIsAlreadyExisted);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){}, 7000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount_fail = pm.globals.get(\"x_ais_OrderRef_CreateAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40301\"\r",
											"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
											"//get global variable to resultDescription \"The AccountName Is Already Existed\"\r",
											"var resultDescriptionTheAccountNameIsAlreadyExisted = pm.globals.get(\"resultDescriptionTheAccountNameIsAlreadyExisted\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionTheAccountNameIsAlreadyExisted+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheAccountNameIsAlreadyExisted);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheAccountNameIsAlreadyExisted);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheAccountNameIsAlreadyExisted); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":3.1518 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":3.1542 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_CreateAccount_002;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccountName was successfully.\"],\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_CreateAccount_002;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/CreateAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreateAccountfail_202104252104720\\\",\\\"x-ais-orderdesc\\\":\\\"CreateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSBU/dV46JYPdX5T/IB197tY6X3lEGyqh4UIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerID\\\":\\\"608583754252b400016f05a4\\\",\\\"Accountname\\\":\\\"Jida_TestAccountname988551\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40302\\\",\\\"Description\\\":\\\"The AccountName is Already Use\\\"}}\",\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)      \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheAccountNameIsAlreadyExisted);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheAccountNameIsAlreadyExisted);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_CreateDate\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{GetResponse_PartnerId}}\",\r\n  \"Accountname\": \"{{GetResponse_AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreateAccount_TST_F6_0_2_004_Error_PartnerIdNotFound",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_CreateAccount_TST_F6_0_2_004_PartnerId\",fieldDataValue.Provisioning.Account.CreateAccount.Value_CreateAccount_TST_F6_0_2_004_PartnerId)\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 404\r",
											"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40400\"\r",
											"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId is Not Found\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdIsNotFound\", resultDescriptionErrorList.resultDescriptionThePartnerIdIsNotFound);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount_fail = pm.globals.get(\"x_ais_OrderRef_CreateAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 404\r",
											"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
											"//get global variable to resultCode \"40400\"\r",
											"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
											"//get global variable to resultDescription \"The PartnerId is Not Found\"\r",
											"var resultDescriptionThePartnerIdIsNotFound = pm.globals.get(\"resultDescriptionThePartnerIdIsNotFound\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeNotFound, function () {\r",
											"    pm.response.to.have.status(statusCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdIsNotFound+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdIsNotFound);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdIsNotFound); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":3.1518 }, ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_CreateAccount_004;\r",
											"                        // [\"Success:InquiryTenant was successfully.\"],\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_CreateAccount_004;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                        \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/CreateAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreateAccountfail_202104252204698\\\",\\\"x-ais-orderdesc\\\":\\\"CreateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSBDbiQVvi6iqVBLwM6JLSyh+fUyAlN01L0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerID\\\":\\\"60013655fcaac90001a97551\\\",\\\"Accountname\\\":\\\"Jida_TestAccountname159676\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"Value_CreateAccount_TST_F6_0_2_004_PartnerId\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                 \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"\r",
											"\r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"Description\\\":\\\"The PartnerId is Not Found\\\"}}\",\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"   \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdIsNotFound);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F6_0_2_004_PartnerId\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{Value_CreateAccount_TST_F6_0_2_004_PartnerId}}\",\r\n  \"Accountname\": \"{{AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreateAccount_TST_F6_0_2_005_Error_PartnerIdFieldNotObjectId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_CreateAccount_TST_F6_0_2_005_PartnerId\",fieldDataValue.Account.Value_CreateAccount_TST_F6_0_2_005_PartnerId)\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionThePartnerIdFieldIsNotObjectId)\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount_fail = pm.globals.get(\"x_ais_OrderRef_CreateAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"var resultDescriptionThePartnerIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionThePartnerIdFieldIsNotObjectId\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdFieldIsNotObjectId+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            //  \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/CreateAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreateAccountfail_202104252204052\\\",\\\"x-ais-orderdesc\\\":\\\"CreateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSKYItxivZEzaTh3q5l6x/+t+fUyAlN01L0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerID\\\":\\\"608587fa4252b400016f06c6null\\\",\\\"Accountname\\\":\\\"Jida_TestAccountname342690\\\"}\",\r",
											"                            \r",
											"                            \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\")+ pm.environment.get(\"Value_CreateAccount_TST_F6_0_2_005_PartnerId\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40300\\\",\\\"Description\\\":\\\"The PartnerId field is not Object Id.\\\"}\"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40300\\\",\\\"Description\\\":\\\"The PartnerId field is not Object Id.\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)       \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F6_0_2_005_PartnerId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{GetResponse_PartnerId}}{{Value_CreateAccount_TST_F6_0_2_005_PartnerId}}\",\r\n  \"Accountname\": \"{{AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreateAccount_TST_F6_0_2_006_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartnerIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdatePartnerIsSuccess);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){}, 10000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"// console.log(\"jsonData : : : : :\",jsonData)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);                  \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");   \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"\r",
											"                            \r",
											"                            \r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 14000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"// setTimeout(function(){InquiryAccount();}, 40000);\r",
											"// setTimeout(function(){RemoveAccount();}, 50000);\r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"GetResponse_CreateDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{GetResponse_PartnerId}}\",\r\n  \"Accountname\": \"{{AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreateAccount_TST_F6_0_2_007_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartnerIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdatePartnerIsSuccess);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){}, 10000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"// console.log(\"jsonData : : : : :\",jsonData)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameCreateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlCreateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);                  \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");   \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"\r",
											"                            \r",
											"                            \r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.Accountname).to.eql(Accountname);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 14000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"// setTimeout(function(){InquiryAccount();}, 40000);\r",
											"// setTimeout(function(){RemoveAccount();}, 50000);\r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"GetResponse_CreateDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerID\": \"{{GetResponse_PartnerId}}\",\r\n  \"Accountname\": \"{{AccountName}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/CreateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"CreateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateAccount",
					"item": [
						{
							"name": "UpdateAccount_TST_F7_1_1_001_Success_RootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_AccountCode)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ExpireDate)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"UpdateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdateAccount\", resultDescriptionSuccessList.resultDescriptionUpdateAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount\", HeaderList.Account.x_ais_OrderRef_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount_fail\", HeaderList.Account.x_ais_OrderRef_UpdateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdateAccount\", HeaderList.Account.x_ais_OrderDesc_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Partner/RemoveAccount\"\r",
											"pm.globals.set(\"urlPartnerRemoveAccount\", urlRouteList.Partner.urlPartnerRemoveAccount);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await CreateAccount();}, 4000); \r",
											"setTimeout(async function(){}, 5000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"var x_ais_OrderRef_UpdateAccount = pm.globals.get(\"x_ais_OrderRef_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"var x_ais_OrderDesc_UpdateAccount = pm.globals.get(\"x_ais_OrderDesc_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"UpdateAccount is Success\"\r",
											"var resultDescriptionUpdateAccount = pm.globals.get(\"resultDescriptionUpdateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"UpdateAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus description is '+'\"'+ resultDescriptionUpdateAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionUpdateAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameUpdateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlUpdateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionUpdateAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionUpdateAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":3.0592 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.892 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":10.5162 }, { \"no\":\"4\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:UpdateAccount was successfully.\", \"processTime\":26.2567 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdateAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InquiryAccountName was successfully.\",\"Success:UpdateAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdateAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                //  \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/UpdateAccount\\\",\\\"method\\\":\\\"PUT\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"UpdateAccount_202104252204013\\\",\\\"x-ais-orderdesc\\\":\\\"UpdateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSLaGWccA0YM18lO182Zd2UavuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"ExpireDate\\\":\\\"2021-11-30T15:27:27.396+07:00\\\",\\\"ClearExpireDate\\\":true}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let Accountname = pm.environment.get(\"GetResponse_AccountName\");\r",
											"                            let AccountCode = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"                            let ExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"                            let ClearExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                          \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.ClearExpireDate)).to.eql(ClearExpireDate);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"                            console.log(\"resquest.body.AccountCode : \" + jsonParseRequestObject.body.AccountCode + \" = \" + AccountCode);\r",
											"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
											"                            console.log(\"resquest.body.ClearExpireDate : \" + JSON.stringify(jsonParseRequestObject.body.ClearExpireDate) + \" = \" + ClearExpireDate);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName107667\\\",\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"CreatedDate\\\":\\\"2021-04-25T22:25:54.977+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-25T22:25:53.995+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"UpdateAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerName).to.eql(PartnerName); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId).to.eql(AccountId);                           \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionUpdateAccount);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.PartnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.PartnerInfo.PartnerName + \" = \" + PartnerName);                 \r",
											"                            console.log(\"response.PartnerInfo.AccountId : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId + \" = \" + AccountId); \r",
											"                            console.log(\"response.PartnerInfo.AccountName : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName + \" = \" + Accountname);\r",
											"                            console.log(\"response.PartnerInfo.CreateDate : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountCode + \" = \" + AccountCode); \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionUpdateAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo;\r",
											"        // console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"         for(let i=0;i<AccountInfo.length;i++){\r",
											"\r",
											"            pm.test('Verify DB Check Data : UpdateAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"PartnerId : \" + AccountInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"AccountName : \" + AccountInfo[i].AccountInfo[0].AccountName + \" = \" + pm.environment.get(\"AccountName\"));\r",
											"                console.log(\"AccountId : \" + AccountInfo[i].AccountInfo[0].AccountId + \" = \" + pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                console.log(\"CreateDate : \" + AccountInfo[i].CreateDate + \" = \" + pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"\r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo[i].PartnerId).to.eql(jsonData.PartnerInfo.PartnerId);\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountName).to.eql(pm.environment.get(\"GetResponse_AccountName\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountId).to.eql(pm.environment.get(\"GetResponse_AccountId\"));\r",
											"           \r",
											"\r",
											"            });\r",
											"         }\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryAccount();}, 30000);\r",
											"setTimeout(function(){RemoveAccount();}, 40000);  \r",
											"setTimeout(function(){RemovePartner();}, 50000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_UpdateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\",\r\n  \"AccountName\": \"{{GetResponse_AccountName}}\",\r\n  \"AccountCode\" : \"{{Value_UpdateAccount_TST_F7_1_1_001_AccountCode}}\",\r\n  \"ExpireDate\": \"{{Value_UpdateAccount_TST_F7_1_1_001_ExpireDate}}\",\r\n  \"ClearExpireDate\" : {{Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate}}\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/UpdateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"UpdateAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateAccount_TST_F7_1_1_002_Success_SupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_AccountCode)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ExpireDate)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"UpdateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdateAccount\", resultDescriptionSuccessList.resultDescriptionUpdateAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount\", HeaderList.Account.x_ais_OrderRef_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount_fail\", HeaderList.Account.x_ais_OrderRef_UpdateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdateAccount\", HeaderList.Account.x_ais_OrderDesc_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Partner/RemoveAccount\"\r",
											"pm.globals.set(\"urlPartnerRemoveAccount\", urlRouteList.Partner.urlPartnerRemoveAccount);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await Signin2();}, 4000); \r",
											"setTimeout(async function(){await CreateAccount();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"var x_ais_OrderRef_UpdateAccount = pm.globals.get(\"x_ais_OrderRef_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"var x_ais_OrderDesc_UpdateAccount = pm.globals.get(\"x_ais_OrderDesc_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"UpdateAccount is Success\"\r",
											"var resultDescriptionUpdateAccount = pm.globals.get(\"resultDescriptionUpdateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"UpdateAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus description is '+'\"'+ resultDescriptionUpdateAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionUpdateAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameUpdateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlUpdateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionUpdateAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionUpdateAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":3.0592 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.892 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":10.5162 }, { \"no\":\"4\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:UpdateAccount was successfully.\", \"processTime\":26.2567 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdateAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InquiryAccountName was successfully.\",\"Success:UpdateAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdateAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                //  \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/UpdateAccount\\\",\\\"method\\\":\\\"PUT\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"UpdateAccount_202104252204013\\\",\\\"x-ais-orderdesc\\\":\\\"UpdateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSLaGWccA0YM18lO182Zd2UavuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"ExpireDate\\\":\\\"2021-11-30T15:27:27.396+07:00\\\",\\\"ClearExpireDate\\\":true}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let Accountname = pm.environment.get(\"GetResponse_AccountName\");\r",
											"                            let AccountCode = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"                            let ExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"                            let ClearExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                          \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.ClearExpireDate)).to.eql(ClearExpireDate);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"                            console.log(\"resquest.body.AccountCode : \" + jsonParseRequestObject.body.AccountCode + \" = \" + AccountCode);\r",
											"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
											"                            console.log(\"resquest.body.ClearExpireDate : \" + JSON.stringify(jsonParseRequestObject.body.ClearExpireDate) + \" = \" + ClearExpireDate);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName107667\\\",\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"CreatedDate\\\":\\\"2021-04-25T22:25:54.977+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-25T22:25:53.995+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"UpdateAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerName).to.eql(PartnerName); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId).to.eql(AccountId);                           \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionUpdateAccount);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.PartnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.PartnerInfo.PartnerName + \" = \" + PartnerName);                 \r",
											"                            console.log(\"response.PartnerInfo.AccountId : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId + \" = \" + AccountId); \r",
											"                            console.log(\"response.PartnerInfo.AccountName : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName + \" = \" + Accountname);\r",
											"                            console.log(\"response.PartnerInfo.CreateDate : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountCode + \" = \" + AccountCode); \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionUpdateAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo;\r",
											"        // console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"         for(let i=0;i<AccountInfo.length;i++){\r",
											"\r",
											"            pm.test('Verify DB Check Data : UpdateAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"PartnerId : \" + AccountInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"AccountName : \" + AccountInfo[i].AccountInfo[0].AccountName + \" = \" + pm.environment.get(\"AccountName\"));\r",
											"                console.log(\"AccountId : \" + AccountInfo[i].AccountInfo[0].AccountId + \" = \" + pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                console.log(\"CreateDate : \" + AccountInfo[i].CreateDate + \" = \" + pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"\r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo[i].PartnerId).to.eql(jsonData.PartnerInfo.PartnerId);\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountName).to.eql(pm.environment.get(\"GetResponse_AccountName\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountId).to.eql(pm.environment.get(\"GetResponse_AccountId\"));\r",
											"           \r",
											"\r",
											"            });\r",
											"         }\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryAccount();}, 30000);\r",
											"setTimeout(function(){RemoveAccount();}, 40000);  \r",
											"setTimeout(function(){RemovePartner();}, 50000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_UpdateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\",\r\n  \"AccountName\": \"{{GetResponse_AccountName}}\",\r\n  \"AccountCode\" : \"{{Value_UpdateAccount_TST_F7_1_1_001_AccountCode}}\",\r\n  \"ExpireDate\": \"{{Value_UpdateAccount_TST_F7_1_1_001_ExpireDate}}\",\r\n  \"ClearExpireDate\" : {{Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate}}\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/UpdateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"UpdateAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateAccount_TST_F7_1_1_003_Success_CustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_AccountCode)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ExpireDate)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"UpdateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdateAccount\", resultDescriptionSuccessList.resultDescriptionUpdateAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount\", HeaderList.Account.x_ais_OrderRef_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount_fail\", HeaderList.Account.x_ais_OrderRef_UpdateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdateAccount\", HeaderList.Account.x_ais_OrderDesc_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Partner/RemoveAccount\"\r",
											"pm.globals.set(\"urlPartnerRemoveAccount\", urlRouteList.Partner.urlPartnerRemoveAccount);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await Signin2();}, 4000); \r",
											"setTimeout(async function(){await CreateAccount();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"var x_ais_OrderRef_UpdateAccount = pm.globals.get(\"x_ais_OrderRef_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"var x_ais_OrderDesc_UpdateAccount = pm.globals.get(\"x_ais_OrderDesc_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"UpdateAccount is Success\"\r",
											"var resultDescriptionUpdateAccount = pm.globals.get(\"resultDescriptionUpdateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"UpdateAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus description is '+'\"'+ resultDescriptionUpdateAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionUpdateAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameUpdateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlUpdateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionUpdateAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionUpdateAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":3.0592 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.892 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":10.5162 }, { \"no\":\"4\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:UpdateAccount was successfully.\", \"processTime\":26.2567 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdateAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InquiryAccountName was successfully.\",\"Success:UpdateAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdateAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                //  \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/UpdateAccount\\\",\\\"method\\\":\\\"PUT\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"UpdateAccount_202104252204013\\\",\\\"x-ais-orderdesc\\\":\\\"UpdateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSLaGWccA0YM18lO182Zd2UavuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"ExpireDate\\\":\\\"2021-11-30T15:27:27.396+07:00\\\",\\\"ClearExpireDate\\\":true}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let Accountname = pm.environment.get(\"GetResponse_AccountName\");\r",
											"                            let AccountCode = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"                            let ExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"                            let ClearExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                          \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.ClearExpireDate)).to.eql(ClearExpireDate);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"                            console.log(\"resquest.body.AccountCode : \" + jsonParseRequestObject.body.AccountCode + \" = \" + AccountCode);\r",
											"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
											"                            console.log(\"resquest.body.ClearExpireDate : \" + JSON.stringify(jsonParseRequestObject.body.ClearExpireDate) + \" = \" + ClearExpireDate);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName107667\\\",\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"CreatedDate\\\":\\\"2021-04-25T22:25:54.977+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-25T22:25:53.995+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"UpdateAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerName).to.eql(PartnerName); \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId).to.eql(AccountId);                           \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionUpdateAccount);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.PartnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.PartnerInfo.PartnerName + \" = \" + PartnerName);                 \r",
											"                            console.log(\"response.PartnerInfo.AccountId : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountId + \" = \" + AccountId); \r",
											"                            console.log(\"response.PartnerInfo.AccountName : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountName + \" = \" + Accountname);\r",
											"                            console.log(\"response.PartnerInfo.CreateDate : \" + jsonParseResponseObject.PartnerInfo.AccountInfo[0].AccountCode + \" = \" + AccountCode); \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionUpdateAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo;\r",
											"        // console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"         for(let i=0;i<AccountInfo.length;i++){\r",
											"\r",
											"            pm.test('Verify DB Check Data : UpdateAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"PartnerId : \" + AccountInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"AccountName : \" + AccountInfo[i].AccountInfo[0].AccountName + \" = \" + pm.environment.get(\"AccountName\"));\r",
											"                console.log(\"AccountId : \" + AccountInfo[i].AccountInfo[0].AccountId + \" = \" + pm.environment.get(\"GetResponse_AccountId\"));\r",
											"                console.log(\"CreateDate : \" + AccountInfo[i].CreateDate + \" = \" + pm.environment.get(\"GetResponse_CreateDate\"));\r",
											"\r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo[i].PartnerId).to.eql(jsonData.PartnerInfo.PartnerId);\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountName).to.eql(pm.environment.get(\"GetResponse_AccountName\"));\r",
											"                pm.expect(AccountInfo[i].AccountInfo[0].AccountId).to.eql(pm.environment.get(\"GetResponse_AccountId\"));\r",
											"           \r",
											"\r",
											"            });\r",
											"         }\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryAccount();}, 30000);\r",
											"setTimeout(function(){RemoveAccount();}, 40000);  \r",
											"setTimeout(function(){RemovePartner();}, 50000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_UpdateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\",\r\n  \"AccountName\": \"{{GetResponse_AccountName}}\",\r\n  \"AccountCode\" : \"{{Value_UpdateAccount_TST_F7_1_1_001_AccountCode}}\",\r\n  \"ExpireDate\": \"{{Value_UpdateAccount_TST_F7_1_1_001_ExpireDate}}\",\r\n  \"ClearExpireDate\" : {{Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate}}\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/UpdateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"UpdateAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateAccount_TST_F7_0_2_002_Error_ExpireDateMissing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_AccountName)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_0_2_002_ExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_0_2_002_ExpireDate)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdateAccountIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdateAccountIsSuccess);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"pm.globals.set(\"resultDescriptionTheParameterExpireDateIsMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount\", HeaderList.Account.x_ais_OrderRef_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount_fail\", HeaderList.Account.x_ais_OrderRef_UpdateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdateAccount\", HeaderList.Account.x_ais_OrderDesc_UpdateAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        // console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){}, 7000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_UpdateAccount = pm.globals.get(\"x_ais_OrderRef_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"var x_ais_OrderRef_UpdateAccount_fail = pm.globals.get(\"x_ais_OrderRef_UpdateAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_UpdateAccount = pm.globals.get(\"x_ais_OrderDesc_UpdateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"UpdateAccount is Success\"\r",
											"var resultDescriptionUpdateAccountIsSuccess = pm.globals.get(\"resultDescriptionUpdateAccountIsSuccess\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The Parameter ExpireDate is Missing Or Invalid\"\r",
											"var resultDescriptionTheParameterExpireDateIsMissingOrInvalid = pm.globals.get(\"resultDescriptionTheParameterExpireDateIsMissingOrInvalid\");\r",
											"\r",
											"\r",
											"pm.test(\"UpdateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus description is '+'\"'+ resultDescriptionTheParameterExpireDateIsMissingOrInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameUpdateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlUpdateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdateAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdateAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : UpdateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheParameterExpireDateIsMissingOrInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.9144 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.6579 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccountName was successfully.\", \"processTime\":1.5547 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdateAccount_002;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InquiryAccountName was successfully.\",\"Success:UpdateAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdateAccount_002;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"                            \r",
											"                           \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdateAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"                            let ExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_0_2_002_ExpireDate\");\r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
											"\r",
											"                            \r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheParameterExpireDateIsMissingOrInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheParameterExpireDateIsMissingOrInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_0_2_002_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdateAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_UpdateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\",\r\n  \"AccountName\": \"{{GetResponse_AccountName}}\",\r\n  \"ExpireDate\": \"{{Value_UpdateAccount_TST_F7_0_2_002_ExpireDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/UpdateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"UpdateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdateAccount_TST_F7_0_2_004_Error_PartnerIdNotFound",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_AccountName)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var ExpireDate = moment().add(pm.environment.get(\"numberFutureDateAccount\"), 'day'); \r",
											"pm.environment.set(\"ExpireDate\", ExpireDate);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 404\r",
											"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40400\"\r",
											"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdateAccountIsSuccess\", resultDescriptionSuccessList.resultDescriptionUpdateAccountIsSuccess);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId is Not Found\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdIsNotFound\", resultDescriptionErrorList.resultDescriptionThePartnerIdIsNotFound);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount\", HeaderList.Account.x_ais_OrderRef_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount_fail\", HeaderList.Account.x_ais_OrderRef_UpdateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdateAccount\", HeaderList.Account.x_ais_OrderDesc_UpdateAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){await RemovePartner();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"var x_ais_OrderRef_UpdateAccount = pm.globals.get(\"x_ais_OrderRef_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"var x_ais_OrderRef_UpdateAccount_fail = pm.globals.get(\"x_ais_OrderRef_UpdateAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"var x_ais_OrderDesc_UpdateAccount = pm.globals.get(\"x_ais_OrderDesc_UpdateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 404\r",
											"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
											"//get global variable to resultCode \"40400\"\r",
											"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
											"//get global variable to resultDescription \"The PartnerId is Not Found\"\r",
											"var resultDescriptionThePartnerIdIsNotFound = pm.globals.get(\"resultDescriptionThePartnerIdIsNotFound\");\r",
											"\r",
											"\r",
											"pm.test(\"UpdateAccount : Status code is \" + statusCodeNotFound, function () {\r",
											"    pm.response.to.have.status(statusCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdIsNotFound+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameUpdateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlUpdateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdateAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdateAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultCodeNotFound);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultDescriptionThePartnerIdIsNotFound);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdIsNotFound); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.5273 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdateAccount_004;\r",
											"                        // [\"Success:InquiryTenant was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdateAccount_004;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/UpdateAccount\\\",\\\"method\\\":\\\"PUT\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"UpdateAccountfail_202104260904529\\\",\\\"x-ais-orderdesc\\\":\\\"UpdateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjgnQM/GxX46J3l+KQGs2dmM6X3lEGyqh4UIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60013655fcaac90001a97559\\\",\\\"AccountId\\\":\\\"608624224252b400016f21f6\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname278117\\\",\\\"ExpireDate\\\":\\\"2020-11-30T15:27:27.396+07:00\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdateAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let Accountname = pm.environment.get(\"AccountName\");\r",
											"                            let ExpireDate = pm.environment.get(\"ExpireDate\");\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                                               \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"Description\\\":\\\"The PartnerId is Not Found\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObjectjsonParseResponseObject)      \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);  \r",
											"\r",
											"                            \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdIsNotFound);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\");\r",
											"pm.environment.unset(\"ExpireDate\");\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdateAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_UpdateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\",\r\n  \"AccountName\": \"{{GetResponse_AccountName}}\",\r\n  \"ExpireDate\": \"{{ExpireDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/UpdateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"UpdateAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdateAccount_TST_F7_0_2_005_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_AccountCode)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ExpireDate)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"UpdateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdateAccount\", resultDescriptionSuccessList.resultDescriptionUpdateAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount\", HeaderList.Account.x_ais_OrderRef_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount_fail\", HeaderList.Account.x_ais_OrderRef_UpdateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdateAccount\", HeaderList.Account.x_ais_OrderDesc_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Partner/RemoveAccount\"\r",
											"pm.globals.set(\"urlPartnerRemoveAccount\", urlRouteList.Partner.urlPartnerRemoveAccount);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await CreateAccount();}, 4000); \r",
											"setTimeout(async function(){await Signin2();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"var x_ais_OrderRef_UpdateAccount = pm.globals.get(\"x_ais_OrderRef_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"var x_ais_OrderDesc_UpdateAccount = pm.globals.get(\"x_ais_OrderDesc_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"UpdateAccount is Success\"\r",
											"var resultDescriptionUpdateAccount = pm.globals.get(\"resultDescriptionUpdateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"UpdateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameUpdateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlUpdateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                   \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                //  \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/UpdateAccount\\\",\\\"method\\\":\\\"PUT\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"UpdateAccount_202104252204013\\\",\\\"x-ais-orderdesc\\\":\\\"UpdateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSLaGWccA0YM18lO182Zd2UavuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"ExpireDate\\\":\\\"2021-11-30T15:27:27.396+07:00\\\",\\\"ClearExpireDate\\\":true}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let Accountname = pm.environment.get(\"GetResponse_AccountName\");\r",
											"                            let AccountCode = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"                            let ExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"                            let ClearExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                          \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.ClearExpireDate)).to.eql(ClearExpireDate);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"                            console.log(\"resquest.body.AccountCode : \" + jsonParseRequestObject.body.AccountCode + \" = \" + AccountCode);\r",
											"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
											"                            console.log(\"resquest.body.ClearExpireDate : \" + JSON.stringify(jsonParseRequestObject.body.ClearExpireDate) + \" = \" + ClearExpireDate);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName107667\\\",\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"CreatedDate\\\":\\\"2021-04-25T22:25:54.977+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-25T22:25:53.995+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"UpdateAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"    \r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 40000);  \r",
											"setTimeout(function(){RemovePartner();}, 50000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_UpdateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\",\r\n  \"AccountName\": \"{{GetResponse_AccountName}}\",\r\n  \"AccountCode\" : \"{{Value_UpdateAccount_TST_F7_1_1_001_AccountCode}}\",\r\n  \"ExpireDate\": \"{{Value_UpdateAccount_TST_F7_1_1_001_ExpireDate}}\",\r\n  \"ClearExpireDate\" : {{Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate}}\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/UpdateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"UpdateAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateAccount_TST_F7_0_2_006_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_AccountCode)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ExpireDate)\r",
											"pm.environment.set(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\",fieldDataValue.Provisioning.Account.UpdateAccount.Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"UpdateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdateAccount\", resultDescriptionSuccessList.resultDescriptionUpdateAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount\", HeaderList.Account.x_ais_OrderRef_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"UpdateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdateAccount_fail\", HeaderList.Account.x_ais_OrderRef_UpdateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdateAccount\", HeaderList.Account.x_ais_OrderDesc_UpdateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Partner/RemoveAccount\"\r",
											"pm.globals.set(\"urlPartnerRemoveAccount\", urlRouteList.Partner.urlPartnerRemoveAccount);\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await CreateAccount();}, 4000); \r",
											"setTimeout(async function(){await Signin2();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdateAccount_\"\r",
											"var x_ais_OrderRef_UpdateAccount = pm.globals.get(\"x_ais_OrderRef_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdateAccount\"\r",
											"var x_ais_OrderDesc_UpdateAccount = pm.globals.get(\"x_ais_OrderDesc_UpdateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"UpdateAccount is Success\"\r",
											"var resultDescriptionUpdateAccount = pm.globals.get(\"resultDescriptionUpdateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"UpdateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('UpdateAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameUpdateAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlUpdateAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdateAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                   \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdateAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdateAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                //  \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/UpdateAccount\\\",\\\"method\\\":\\\"PUT\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"UpdateAccount_202104252204013\\\",\\\"x-ais-orderdesc\\\":\\\"UpdateAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFeeG2xnVxQSLaGWccA0YM18lO182Zd2UavuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"ExpireDate\\\":\\\"2021-11-30T15:27:27.396+07:00\\\",\\\"ClearExpireDate\\\":true}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdateAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdateAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            let Accountname = pm.environment.get(\"GetResponse_AccountName\");\r",
											"                            let AccountCode = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"                            let ExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"                            let ClearExpireDate = pm.environment.get(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                          \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountName).to.eql(Accountname);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountCode).to.eql(AccountCode);\r",
											"                            pm.expect(jsonParseRequestObject.body.ExpireDate).to.eql(ExpireDate);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.ClearExpireDate)).to.eql(ClearExpireDate);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.Accountname + \" = \" + Accountname);\r",
											"                            console.log(\"resquest.body.AccountCode : \" + jsonParseRequestObject.body.AccountCode + \" = \" + AccountCode);\r",
											"                            console.log(\"resquest.body.ExpireDate : \" + jsonParseRequestObject.body.ExpireDate + \" = \" + ExpireDate);\r",
											"                            console.log(\"resquest.body.ClearExpireDate : \" + JSON.stringify(jsonParseRequestObject.body.ClearExpireDate) + \" = \" + ClearExpireDate);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"PartnerId\\\":\\\"60858a014252b400016f0781\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName107667\\\",\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"60858a024252b400016f0784\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname107667\\\",\\\"AccountCode\\\":\\\"QATesterAcc01\\\",\\\"CreatedDate\\\":\\\"2021-04-25T22:25:54.977+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-25T22:25:53.995+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"UpdateAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"    \r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 40000);  \r",
											"setTimeout(function(){RemovePartner();}, 50000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdateAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_UpdateAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\",\r\n  \"AccountName\": \"{{GetResponse_AccountName}}\",\r\n  \"AccountCode\" : \"{{Value_UpdateAccount_TST_F7_1_1_001_AccountCode}}\",\r\n  \"ExpireDate\": \"{{Value_UpdateAccount_TST_F7_1_1_001_ExpireDate}}\",\r\n  \"ClearExpireDate\" : {{Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate}}\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/UpdateAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"UpdateAccount"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RemoveAccount",
					"item": [
						{
							"name": "RemoveAccount_TST_F8_1_1_001_Success_RootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await CreateAccount();}, 4000); \r",
											"setTimeout(async function(){}, 5000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"DeleteAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemoveAccountRemoveAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.4328 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.682 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":8.7059 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                     pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccount\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104201704962\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAHf4R4LN1ULvX9+uatqfQwVOXYtpKb8ZxDvx/+b5FEoB2fCWCJJgzvf\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607eab8463fa0e0001c3b391\\\",\\\"AccountId\\\":\\\"607eab8563fa0e0001c3b394\\\"}}\"\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");  \r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                       \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccount is Success\\\"}}\",\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccount);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo[0]\r",
											"        // console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"            pm.test('Verify DB Check Data : RemoveAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"AccountInfo : \" + AccountInfo.AccountInfo + \" = \" + []);\r",
											"\r",
											"\r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo.AccountInfo).to.eql([]);\r",
											"\r",
											"                \r",
											"\r",
											"            });\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000);\r",
											"setTimeout(function(){InquiryAccount();}, 30000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F8_1_1_002_Success_SupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await Signin2();}, 4000); \r",
											"setTimeout(async function(){await CreateAccount();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"DeleteAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemoveAccountRemoveAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.4328 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.682 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":8.7059 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                     pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccount\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104201704962\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAHf4R4LN1ULvX9+uatqfQwVOXYtpKb8ZxDvx/+b5FEoB2fCWCJJgzvf\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607eab8463fa0e0001c3b391\\\",\\\"AccountId\\\":\\\"607eab8563fa0e0001c3b394\\\"}}\"\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");  \r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                       \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccount is Success\\\"}}\",\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccount);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo\r",
											"        console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"            pm.test('Verify DB Check Data : RemoveAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"AccountInfo : \" + AccountInfo + \" = \" + []);\r",
											"\r",
											"\r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo).to.eql([]);\r",
											"\r",
											"                \r",
											"\r",
											"            });\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000);\r",
											"setTimeout(function(){InquiryAccount();}, 30000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F8_1_1_003_Success_CustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 3000); \r",
											"setTimeout(async function(){await Signin2();}, 4000); \r",
											"setTimeout(async function(){await CreateAccount();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"DeleteAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemoveAccountRemoveAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.4328 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.682 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":8.7059 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccount;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                     pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccount\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104201704962\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAHf4R4LN1ULvX9+uatqfQwVOXYtpKb8ZxDvx/+b5FEoB2fCWCJJgzvf\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607eab8463fa0e0001c3b391\\\",\\\"AccountId\\\":\\\"607eab8563fa0e0001c3b394\\\"}}\"\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");  \r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                       \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccount is Success\\\"}}\",\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccount);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        // console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo\r",
											"        console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"            pm.test('Verify DB Check Data : RemoveAccount' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                console.log(\"AccountInfo : \" + AccountInfo + \" = \" + []);\r",
											"\r",
											"\r",
											"\r",
											"                pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"                pm.expect(AccountInfo).to.eql([]);\r",
											"\r",
											"                \r",
											"\r",
											"            });\r",
											"    \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000);\r",
											"setTimeout(function(){InquiryAccount();}, 30000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F8_0_2_002_Error_AccountIdNotFound",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_DeleteAccount_TST_F8_0_2_002_AccountId\",fieldDataValue.Provisioning.Account.RemoveAccount.Value_DeleteAccount_TST_F8_0_2_002_AccountId)\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 404\r",
											"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40400\"\r",
											"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The AccountId is Not Found\"\r",
											"pm.globals.set(\"resultDescriptionTheAccountIdIsNotFound\", resultDescriptionErrorList.resultDescriptionTheAccountIdIsNotFound);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){}, 7000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"DeleteAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 404\r",
											"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
											"//get global variable to resultCode \"40400\"\r",
											"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
											"//get global variable to resultDescription \"The AccountId is Not Found\"\r",
											"var resultDescriptionTheAccountIdIsNotFound = pm.globals.get(\"resultDescriptionTheAccountIdIsNotFound\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeNotFound, function () {\r",
											"    pm.response.to.have.status(statusCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionTheAccountIdIsNotFound+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheAccountIdIsNotFound);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemoveAccountRemoveAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheAccountIdIsNotFound);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheAccountIdIsNotFound); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.4328 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.682 }, { \"no\":\"3\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":8.7059 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccount_002;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccount_002;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                     pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Account/RemoveAccount\\\", \\\"method\\\":\\\"DELETE\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"RemoveAccountfail_202105060005045\\\", \\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Yv7NLcjTUdTZN/LIBIfeFLFdE/LqUOJHxKVegMrc8SMg==\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6092d95164c3f00001de3c59\\\", \\\"AccountId\\\":\\\"6007f548f950f300014137d8\\\" } }\",\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"Value_DeleteAccount_TST_F8_0_2_002_AccountId\"); \r",
											"                                                \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40400\\\", \\\"Description\\\":\\\"The AccountId is Not Found\\\" } }\",\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\",jsonParseResponseObject)      \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheAccountIdIsNotFound);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheAccountIdIsNotFound);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_DeleteAccount_TST_F8_0_2_002_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{Value_DeleteAccount_TST_F8_0_2_002_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F8_0_2_003_Error_AccountIdFieldIsRequired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_DeleteAccount_TST_F8_0_2_003_AccountId\",fieldDataValue.Provisioning.Account.RemoveAccount.Value_DeleteAccount_TST_F8_0_2_003_AccountId)\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The AccountId field is required.\"\r",
											"pm.globals.set(\"resultDescriptionTheAccountIdFieldIsRequired\", resultDescriptionErrorList.resultDescriptionTheAccountIdFieldIsRequired);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){}, 7000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"DeleteAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The AccountId field is required.\"\r",
											"var resultDescriptionTheAccountIdFieldIsRequired = pm.globals.get(\"resultDescriptionTheAccountIdFieldIsRequired\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionTheAccountIdFieldIsRequired+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheAccountIdFieldIsRequired);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemoveAccountRemoveAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheAccountIdFieldIsRequired);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheAccountIdFieldIsRequired); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Account/RemoveAccount\\\", \\\"method\\\":\\\"DELETE\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"RemoveAccountfail_202105060005969\\\", \\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bCwjA9UdfHIeRabNCzJH830UU9P/NBSY5KVegMrc8SMg==\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6092dc8164c3f00001de3eff\\\", \\\"AccountId\\\":\\\"\\\" } }\",\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"Value_DeleteAccount_TST_F8_0_2_003_AccountId\");\r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The AccountId field is required.\\\" } }\",\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))      \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheAccountIdFieldIsRequired);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheAccountIdFieldIsRequired);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_DeleteAccount_TST_F8_0_2_003_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{Value_DeleteAccount_TST_F8_0_2_003_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F8_0_2_004_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"DeleteAccount is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemoveAccountRemoveAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                       \r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                     pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccount\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104201704962\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAHf4R4LN1ULvX9+uatqfQwVOXYtpKb8ZxDvx/+b5FEoB2fCWCJJgzvf\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607eab8463fa0e0001c3b391\\\",\\\"AccountId\\\":\\\"607eab8563fa0e0001c3b394\\\"}}\"\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");  \r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                       \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccount is Success\\\"}}\",\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000);\r",
											"setTimeout(function(){RemovePartner();}, 30000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F8_0_2_005_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Account --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"DeleteAccount is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"CreateAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreateAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemoveAccountRemoveAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                       \r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                     pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccount\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104201704962\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAHf4R4LN1ULvX9+uatqfQwVOXYtpKb8ZxDvx/+b5FEoB2fCWCJJgzvf\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607eab8463fa0e0001c3b391\\\",\\\"AccountId\\\":\\\"607eab8563fa0e0001c3b394\\\"}}\"\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");  \r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                       \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccount is Success\\\"}}\",\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000);\r",
											"setTimeout(function(){RemovePartner();}, 30000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				},
				{
					"name": "RemoveAccounts",
					"item": [
						{
							"name": "RemoveAccount_TST_F64_1_1_001_Success_AccountFoundRootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 6000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccounts+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccounts); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7555 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":2.7202 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                         //[\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccounts;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccounts;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104211004288\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAE1uJQ2cnvlgCDKUOQlviGGYMcg+Erp8c9GJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607f994f63fa0e0001c3e919\\\",\\\"AccountId\\\":[\\\"607f995063fa0e0001c3e91c\\\"\\\"607f995163fa0e0001c3e91f\\\"]}\r",
											"                 \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                           \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId1\") + pm.environment.get(\"GetResponse_AccountId2\");             \r",
											" \r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"607f995063fa0e0001c3e91c\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"607f995163fa0e0001c3e91f\\\"\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}}activityLog\":{\"startTime\":\"2021-04-21T10:17:38.7825982+07:00\",\"endTime\":\"2021-04-21T10:17:38.8055554+07:00\",\"processTime\":22.9572}},\r",
											"       \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)     \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// // InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")                                          \r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo[0].AccountInfo\r",
											"        // console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"        for(let i=0;i<=AccountInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : RemoveAccounts' , function () {\r",
											"            console.log(\"===============================================================================================================\")    \r",
											"            console.log(\"======== Verify DB Check Data ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"            console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"            console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"            console.log(\"AccountInfo : \" + AccountInfo + \" = \" + []);    \r",
											"\r",
											"            pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"            pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"            pm.expect(AccountInfo).to.eql([]);\r",
											"            \r",
											"\r",
											"            });\r",
											"\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryAccount();}, 30000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{GetResponse_AccountId1}}\",\"{{GetResponse_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_1_1_002_Success_AccountFoundSupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 7000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 8000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccounts+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccounts); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7555 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":2.7202 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                         //[\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccounts;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccounts;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104211004288\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAE1uJQ2cnvlgCDKUOQlviGGYMcg+Erp8c9GJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607f994f63fa0e0001c3e919\\\",\\\"AccountId\\\":[\\\"607f995063fa0e0001c3e91c\\\"\\\"607f995163fa0e0001c3e91f\\\"]}\r",
											"                 \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                           \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId1\") + pm.environment.get(\"GetResponse_AccountId2\");             \r",
											" \r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"607f995063fa0e0001c3e91c\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"607f995163fa0e0001c3e91f\\\"\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}}activityLog\":{\"startTime\":\"2021-04-21T10:17:38.7825982+07:00\",\"endTime\":\"2021-04-21T10:17:38.8055554+07:00\",\"processTime\":22.9572}},\r",
											"       \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)     \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// // InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")                                          \r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo[0].AccountInfo\r",
											"        // console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"        for(let i=0;i<=AccountInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : RemoveAccounts' , function () {\r",
											"            console.log(\"===============================================================================================================\")    \r",
											"            console.log(\"======== Verify DB Check Data ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"            console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"            console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"            console.log(\"AccountInfo : \" + AccountInfo + \" = \" + []);    \r",
											"\r",
											"            pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"            pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"            pm.expect(AccountInfo).to.eql([]);\r",
											"            \r",
											"\r",
											"            });\r",
											"\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryAccount();}, 30000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{GetResponse_AccountId1}}\",\"{{GetResponse_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_1_1_003_Success_AccountFoundCustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 7000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 8000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccounts+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccounts); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7555 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":2.7202 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                         //[\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccounts;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccounts;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104211004288\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAE1uJQ2cnvlgCDKUOQlviGGYMcg+Erp8c9GJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607f994f63fa0e0001c3e919\\\",\\\"AccountId\\\":[\\\"607f995063fa0e0001c3e91c\\\"\\\"607f995163fa0e0001c3e91f\\\"]}\r",
											"                 \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                           \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId1\") + pm.environment.get(\"GetResponse_AccountId2\");             \r",
											" \r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"607f995063fa0e0001c3e91c\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"607f995163fa0e0001c3e91f\\\"\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}}activityLog\":{\"startTime\":\"2021-04-21T10:17:38.7825982+07:00\",\"endTime\":\"2021-04-21T10:17:38.8055554+07:00\",\"processTime\":22.9572}},\r",
											"       \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)     \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// // InquiryAccount\r",
											"InquiryAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")                                          \r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryAccount = {\r",
											"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryAccount,\r",
											"            body: httpRequestInquiryAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryAccount');\r",
											"        let response = await reqPromise(optionsInquiryAccount);\r",
											"        let jsonDataInquiryAccount = await response.json();\r",
											"        console.log('jsonDataInquiryAccount : : : ',jsonDataInquiryAccount)\r",
											"    \r",
											"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryAccount is Success\r",
											"        pm.test('InquiryAccount : OperationStatus Description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let AccountInfo = await jsonDataInquiryAccount.PartnerInfo[0].AccountInfo\r",
											"        // console.log('AccountInfo : : :',AccountInfo);\r",
											"        // console.log('jsonData : : :',jsonData);\r",
											"\r",
											"        for(let i=0;i<=AccountInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : RemoveAccounts' , function () {\r",
											"            console.log(\"===============================================================================================================\")    \r",
											"            console.log(\"======== Verify DB Check Data ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"            console.log(\"Code : \" + operationStatusInquiryAccount.Code + \" = \" + resultCodeSuccess);\r",
											"            console.log(\"Description : \" + operationStatusInquiryAccount.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"            console.log(\"AccountInfo : \" + AccountInfo + \" = \" + []);    \r",
											"\r",
											"            pm.expect(operationStatusInquiryAccount.Code).to.eql(resultCodeSuccess);\r",
											"            pm.expect(operationStatusInquiryAccount.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"            pm.expect(AccountInfo).to.eql([]);\r",
											"            \r",
											"\r",
											"            });\r",
											"\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryAccount();}, 30000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{GetResponse_AccountId1}}\",\"{{GetResponse_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_1_1_004_Success_AccountNotFoundRootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId1)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId2)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 6000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccounts+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccounts); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        \r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7555 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":2.7202 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                         //[\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccounts;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccounts;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104260904957\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjgKmVma1DQ5p8MolZ5csmtdGJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60862ba44252b400016f265e\\\",\\\"AccountId\\\":[\\\"60862ba54252b400016f2661\\\",\\\"60862ba64252b400016f2664\\\"]}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\") + pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                               \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"60862ba54252b400016f2661\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"60862ba64252b400016f2664\\\",\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId1}}\",\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_1_1_005_Success_AccountNotFoundSupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId1)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId2)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 7000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 8000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccounts+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccounts); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        \r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7555 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":2.7202 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                         //[\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccounts;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccounts;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104260904957\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjgKmVma1DQ5p8MolZ5csmtdGJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60862ba44252b400016f265e\\\",\\\"AccountId\\\":[\\\"60862ba54252b400016f2661\\\",\\\"60862ba64252b400016f2664\\\"]}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\") + pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                               \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"60862ba54252b400016f2661\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"60862ba64252b400016f2664\\\",\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId1}}\",\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_1_1_006_Success_AccountNotFoundCustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId1)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId2)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken2\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 7000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 8000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRemoveAccounts+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveAccounts); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        \r",
											"                        // check custom\r",
											"                        // \t\"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7555 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:DeleteAccount was successfully.\", \"processTime\":2.7202 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                         //[\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemoveAccounts;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:DeleteAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemoveAccounts;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104260904957\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjgKmVma1DQ5p8MolZ5csmtdGJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60862ba44252b400016f265e\\\",\\\"AccountId\\\":[\\\"60862ba54252b400016f2661\\\",\\\"60862ba64252b400016f2664\\\"]}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\") + pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                               \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"60862ba54252b400016f2661\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"60862ba64252b400016f2664\\\",\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveAccounts);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveAccounts);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId1}}\",\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_0_2_001_Error_AccountFoundSupplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 6000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 7000); \r",
											"setTimeout(async function(){await Signin2();}, 8000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                       \r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104211004288\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAE1uJQ2cnvlgCDKUOQlviGGYMcg+Erp8c9GJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607f994f63fa0e0001c3e919\\\",\\\"AccountId\\\":[\\\"607f995063fa0e0001c3e91c\\\"\\\"607f995163fa0e0001c3e91f\\\"]}\r",
											"                 \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                           \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId1\") + pm.environment.get(\"GetResponse_AccountId2\");             \r",
											" \r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"607f995063fa0e0001c3e91c\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"607f995163fa0e0001c3e91f\\\"\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}}activityLog\":{\"startTime\":\"2021-04-21T10:17:38.7825982+07:00\",\"endTime\":\"2021-04-21T10:17:38.8055554+07:00\",\"processTime\":22.9572}},\r",
											"       \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)     \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{GetResponse_AccountId1}}\",\"{{GetResponse_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_0_2_002_Error_AccountFoundCustomer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 6000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 7000); \r",
											"setTimeout(async function(){await Signin2();}, 8000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Account --------------//\r",
											"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
											"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                       \r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104211004288\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAE1uJQ2cnvlgCDKUOQlviGGYMcg+Erp8c9GJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607f994f63fa0e0001c3e919\\\",\\\"AccountId\\\":[\\\"607f995063fa0e0001c3e91c\\\"\\\"607f995163fa0e0001c3e91f\\\"]}\r",
											"                 \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                           \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId1\") + pm.environment.get(\"GetResponse_AccountId2\");             \r",
											" \r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"607f995063fa0e0001c3e91c\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"607f995163fa0e0001c3e91f\\\"\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}}activityLog\":{\"startTime\":\"2021-04-21T10:17:38.7825982+07:00\",\"endTime\":\"2021-04-21T10:17:38.8055554+07:00\",\"processTime\":22.9572}},\r",
											"       \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)     \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{GetResponse_AccountId1}}\",\"{{GetResponse_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_0_2_004_Error_AccountNotFoundCustomer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId1)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId2)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 7000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 8000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        \r",
											"                        \r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104260904957\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjgKmVma1DQ5p8MolZ5csmtdGJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60862ba44252b400016f265e\\\",\\\"AccountId\\\":[\\\"60862ba54252b400016f2661\\\",\\\"60862ba64252b400016f2664\\\"]}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\") + pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                               \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"60862ba54252b400016f2661\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"60862ba64252b400016f2664\\\",\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId1}}\",\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemoveAccount_TST_F64_0_2_003_Error_AccountNotFoundSupplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId1)\r",
											"pm.environment.set(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\",fieldDataValue.Provisioning.Account.RemoveAccounts.Value_DeleteAccounts_TST_F64_0_2_002_AccountId2)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccounts\", resultDescriptionSuccessList.resultDescriptionRemoveAccounts);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount_fail\", HeaderList.Account.x_ais_OrderRef_RemoveAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname1\r",
											"        let accountNameValue1 = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName1\", accountNameValue1 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        //Accountname2\r",
											"        let accountNameValue2 = fieldDataValue.Account.AccountNameValue2; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName2\", accountNameValue2 + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount1\r",
											" CreateAccount1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName1\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount1 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount1 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount1 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId1\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount2\r",
											" CreateAccount2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName2\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount2 : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount2 : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount2 : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId2\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount1();}, 7000);\r",
											"setTimeout(async function(){await CreateAccount2();}, 8000); \r",
											"setTimeout(async function(){await Signin2();}, 6000); \r",
											"setTimeout(async function(){}, 9000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount_fail\"\r",
											"var x_ais_OrderRef_RemoveAccount_fail = pm.globals.get(\"x_ais_OrderRef_RemoveAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccounts is Success\"\r",
											"var resultDescriptionRemoveAccounts = pm.globals.get(\"resultDescriptionRemoveAccounts\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemoveAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemoveAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameRemoveAccounts;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlRemoveAccountsMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemoveAccountRemoveAccounts\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        \r",
											"                        \r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemoveAccounts]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemoveAccounts] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/RemoveAccounts\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemoveAccount_202104260904957\\\",\\\"x-ais-orderdesc\\\":\\\"RemoveAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjgKmVma1DQ5p8MolZ5csmtdGJW8SXArxaUIlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"60862ba44252b400016f265e\\\",\\\"AccountId\\\":[\\\"60862ba54252b400016f2661\\\",\\\"60862ba64252b400016f2664\\\"]}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemoveAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemoveAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let AccountId = pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\") + pm.environment.get(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);                \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                               \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1]).to.eql(AccountId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerID : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.AccountId : \" + jsonParseRequestObject.body.AccountId[0]+jsonParseRequestObject.body.AccountId[1] + \" = \" + AccountId);\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"RemoveAccount\\\":[{\\\"AccountId\\\":\\\"60862ba54252b400016f2661\\\",\\\"Status\\\":\\\"Success\\\"},{\\\"AccountId\\\":\\\"60862ba64252b400016f2664\\\",\\\"Status\\\":\\\"Success\\\"}],\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemoveAccounts is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName1\");\r",
											"pm.environment.unset(\"AccountName2\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId1\");\r",
											"pm.environment.unset(\"GetResponse_AccountId2\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId1\");\r",
											"pm.environment.unset(\"Value_DeleteAccounts_TST_F64_0_2_002_AccountId2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemoveAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_RemoveAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"AccountId\": [\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId1}}\",\"{{Value_DeleteAccounts_TST_F64_0_2_002_AccountId2}}\"]\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/RemoveAccounts",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"RemoveAccounts"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				},
				{
					"name": "InquiryAccount",
					"item": [
						{
							"name": "InquiryAccount_TST_F9_1_1_001_Success_RootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount_fail\", HeaderList.Account.x_ais_OrderRef_InquiryAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        // console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											" \r",
											"\r",
											"\r",
											"        pm.environment.set(\"GetResponse_PartnerName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        pm.environment.set(\"GetResponse_PartnerType\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"            // GetResponse_CreatedDate\r",
											"        pm.environment.set(\"GetResponse_CreatedDate\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].CreatedDate)\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){}, 7000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"var x_ais_OrderRef_InquiryAccount_fail = pm.globals.get(\"x_ais_OrderRef_InquiryAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameInquiryAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlInquiryAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : InquiryAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.AuthenticationCollection\", \"responseStatus\":\"Success:InquiryAuthentication was successfully.\", \"processTime\":5.4853 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.3537 }, { \"no\":\"3\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.3787 }, { \"no\":\"4\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.1837 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\",\"db.AccountsCollection\",\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryAccount;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryAccount;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/InquiryAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"InquiryAccount_202104261104623\\\",\\\"x-ais-orderdesc\\\":\\\"InquiryAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjrfgR/HZCRsBlK995As2HBcLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"                      \r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"PartnerInfo\\\":[{\\\"PartnerId\\\":\\\"608645b74252b400016f326b\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName477635\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname477635\\\",\\\"CreatedDate\\\":\\\"2021-04-26T11:46:47.643+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-26T11:46:47.094+07:00\\\"}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryAccount);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"GetResponse_PartnerName\");\r",
											"pm.environment.unset(\"GetResponse_PartnerType\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_InquiryAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/InquiryAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"InquiryAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "InquiryAccount_TST_F9_1_1_002_Success_SupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount_fail\", HeaderList.Account.x_ais_OrderRef_InquiryAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        // console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											" \r",
											"\r",
											"\r",
											"        pm.environment.set(\"GetResponse_PartnerName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        pm.environment.set(\"GetResponse_PartnerType\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"            // GetResponse_CreatedDate\r",
											"        pm.environment.set(\"GetResponse_CreatedDate\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].CreatedDate)\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"var x_ais_OrderRef_InquiryAccount_fail = pm.globals.get(\"x_ais_OrderRef_InquiryAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameInquiryAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlInquiryAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : InquiryAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.AuthenticationCollection\", \"responseStatus\":\"Success:InquiryAuthentication was successfully.\", \"processTime\":5.4853 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.3537 }, { \"no\":\"3\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.3787 }, { \"no\":\"4\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.1837 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\",\"db.AccountsCollection\",\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryAccount_002;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryAccount_002;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/InquiryAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"InquiryAccount_202104261104623\\\",\\\"x-ais-orderdesc\\\":\\\"InquiryAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjrfgR/HZCRsBlK995As2HBcLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"                      \r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"PartnerInfo\\\":[{\\\"PartnerId\\\":\\\"608645b74252b400016f326b\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName477635\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname477635\\\",\\\"CreatedDate\\\":\\\"2021-04-26T11:46:47.643+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-26T11:46:47.094+07:00\\\"}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryAccount);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"GetResponse_PartnerName\");\r",
											"pm.environment.unset(\"GetResponse_PartnerType\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_InquiryAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/InquiryAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"InquiryAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "InquiryAccount_TST_F9_1_1_003_Success_CustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount_fail\", HeaderList.Account.x_ais_OrderRef_InquiryAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        // console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											" \r",
											"\r",
											"\r",
											"        pm.environment.set(\"GetResponse_PartnerName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        pm.environment.set(\"GetResponse_PartnerType\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"            // GetResponse_CreatedDate\r",
											"        pm.environment.set(\"GetResponse_CreatedDate\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].CreatedDate)\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"var x_ais_OrderRef_InquiryAccount_fail = pm.globals.get(\"x_ais_OrderRef_InquiryAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus description is '+'\"'+ resultDescriptionInquiryAccount+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryAccount);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameInquiryAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlInquiryAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : InquiryAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryAccount);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryAccount); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.AuthenticationCollection\", \"responseStatus\":\"Success:InquiryAuthentication was successfully.\", \"processTime\":5.4853 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.3537 }, { \"no\":\"3\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.3787 }, { \"no\":\"4\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":1.1837 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\",\"db.AccountsCollection\",\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryAccount_003;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryAccount_003;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/InquiryAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"InquiryAccount_202104261104623\\\",\\\"x-ais-orderdesc\\\":\\\"InquiryAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjrfgR/HZCRsBlK995As2HBcLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"                      \r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"PartnerInfo\\\":[{\\\"PartnerId\\\":\\\"608645b74252b400016f326b\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName477635\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname477635\\\",\\\"CreatedDate\\\":\\\"2021-04-26T11:46:47.643+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-26T11:46:47.094+07:00\\\"}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryAccount);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryAccount);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"GetResponse_PartnerName\");\r",
											"pm.environment.unset(\"GetResponse_PartnerType\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_InquiryAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/InquiryAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"InquiryAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "InquiryAccount_TST_F9_0_2_002_Error_PartnerIdNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"var x_ais_OrderRef_InquiryAccount_fail = pm.globals.get(\"x_ais_OrderRef_InquiryAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionThePartnerIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionThePartnerIdFieldIsNotObjectId\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"var resultDescriptionThePartnerIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionThePartnerIdFieldIsNotObjectId\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"InquiryAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdFieldIsNotObjectId+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameInquiryAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlInquiryAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryAccount_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryAccount_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : InquiryAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                      \r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                 pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject); \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryAccount_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\")+pm.environment.get(\"Value_InquiryAccount_TST_F9_0_2_002_PartnerId\");\r",
											"\r",
											"                           \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerID).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerID + \" = \" + PartnerId);\r",
											"\r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_InquiryAccount_TST_F9_0_2_002_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_InquiryAccount_TST_F9_0_2_002_PartnerId\",fieldDataValue.Provisioning.Account.InquiryAccount.Value_InquiryAccount_TST_F9_0_2_002_PartnerId)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The AccountId field is not Object Id.\"\r",
											"pm.globals.set(\"resultDescriptionTheAccountIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionTheAccountIdFieldIsNotObjectId)\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount_fail\", HeaderList.Account.x_ais_OrderRef_InquiryAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Account --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"CreateAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount_fail\", HeaderList.Account.x_ais_OrderRef_CreateAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"\r",
											"        \r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000);\r",
											"setTimeout(async function(){await CreateAccount();}, 6000);\r",
											"setTimeout(async function(){}, 7000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryAccount_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_InquiryAccount}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"PartnerID\": \"{{GetResponse_PartnerId}}{{Value_InquiryAccount_TST_F9_0_2_002_PartnerId}}\" \r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/InquiryAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"InquiryAccount"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "InquiryAccount_TST_F9_0_2_003_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount_fail\", HeaderList.Account.x_ais_OrderRef_InquiryAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        // console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											" \r",
											"\r",
											"\r",
											"        pm.environment.set(\"GetResponse_PartnerName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        pm.environment.set(\"GetResponse_PartnerType\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"            // GetResponse_CreatedDate\r",
											"        pm.environment.set(\"GetResponse_CreatedDate\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].CreatedDate)\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"var x_ais_OrderRef_InquiryAccount_fail = pm.globals.get(\"x_ais_OrderRef_InquiryAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"InquiryAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameInquiryAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlInquiryAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : InquiryAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/InquiryAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"InquiryAccount_202104261104623\\\",\\\"x-ais-orderdesc\\\":\\\"InquiryAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjrfgR/HZCRsBlK995As2HBcLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"                      \r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"PartnerInfo\\\":[{\\\"PartnerId\\\":\\\"608645b74252b400016f326b\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName477635\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname477635\\\",\\\"CreatedDate\\\":\\\"2021-04-26T11:46:47.643+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-26T11:46:47.094+07:00\\\"}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"GetResponse_PartnerName\");\r",
											"pm.environment.unset(\"GetResponse_PartnerType\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_InquiryAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/InquiryAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"InquiryAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "InquiryAccount_TST_F9_0_2_004_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"                                                                                        \r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
											"//set global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryAccount_fail\", HeaderList.Account.x_ais_OrderRef_InquiryAccount_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"      \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"        \r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"\r",
											"        // console.log(\"httpRequestCreateAccount : : : :\", httpRequestCreateAccount)\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"\r",
											"        // console.log('jsonDataCreateAccount : :',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											" \r",
											"\r",
											"\r",
											"        pm.environment.set(\"GetResponse_PartnerName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        pm.environment.set(\"GetResponse_PartnerType\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"            // GetResponse_CreatedDate\r",
											"        pm.environment.set(\"GetResponse_CreatedDate\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].CreatedDate)\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											"Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){await CreateAccount();}, 6000); \r",
											"setTimeout(async function(){await Signin2();}, 7000); \r",
											"setTimeout(async function(){}, 8000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
											"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
											"//get global variable to x_ais_OrderRef \"InquiryAccountfail_\"\r",
											"var x_ais_OrderRef_InquiryAccount_fail = pm.globals.get(\"x_ais_OrderRef_InquiryAccount_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
											"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
											"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"InquiryAccount : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('InquiryAccount : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        // console.log(\"httpRequestRemoveAccount : : :\",httpRequestRemoveAccount)\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Account]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Account.cmdNameInquiryAccount;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Account.requestObjectUrlInquiryAccountMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        // console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : InquiryAccount\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryAccount]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryAccount] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Account/InquiryAccount\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"InquiryAccount_202104261104623\\\",\\\"x-ais-orderdesc\\\":\\\"InquiryAccount\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFuFNPTHfkpjrfgR/HZCRsBlK995As2HBcLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\"}}\",\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryAccount + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryAccount;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let AccountId = pm.environment.get(\"GetResponse_AccountId\");\r",
											"                            \r",
											"                           \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);     \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccountId).to.eql(AccountId);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.Accountname : \" + jsonParseRequestObject.body.AccountId + \" = \" + AccountId);\r",
											"                      \r",
											"      \r",
											"                          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"PartnerInfo\\\":[{\\\"PartnerId\\\":\\\"608645b74252b400016f326b\\\",\\\"PartnerName\\\":\\\"Jida_TestPartnerName477635\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"AccountInfo\\\":[{\\\"AccountId\\\":\\\"608645b74252b400016f326e\\\",\\\"AccountName\\\":\\\"Jida_TestAccountname477635\\\",\\\"CreatedDate\\\":\\\"2021-04-26T11:46:47.643+07:00\\\"}],\\\"CreateDate\\\":\\\"2021-04-26T11:46:47.094+07:00\\\"}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryAccount is Success\\\"}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", jsonParseResponseObject)  \r",
											"     \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemoveAccount();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_CreateAccount_TST_F2_0_2_003_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountName\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_AccountCode\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ExpireDate\");\r",
											"pm.environment.unset(\"Value_UpdateAccount_TST_F7_1_1_001_ClearExpireDate\");\r",
											"pm.environment.unset(\"GetResponse_PartnerName\");\r",
											"pm.environment.unset(\"GetResponse_PartnerType\");\r",
											"pm.environment.unset(\"GetResponse_CreatedDate\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryAccount}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_InquiryAccount}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountId\": \"{{GetResponse_AccountId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Account/InquiryAccount",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Account",
										"InquiryAccount"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}